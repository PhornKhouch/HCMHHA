@model Humica.Training.TrainingProcessObject
@using Humica.EF.Models.SY
<script type="text/javascript">
    var _selectedIDsBranch = "";
    var textSeparator = ",";
    //fire event action
    var _L = "";

    $(document).ready(function () {
        $('#_btnBackAction').click(function ()
        {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        //popup
        $('#btnClear').click(function () {
            gvemployeeselector.UnselectAllRowsOnPage();
        });
        $('#btnSelect').click(function () {
            $.ajax({
                type: "POST",
                url: _baseUrl + '/Training/Process/TRTrainingEmployee/SelectedTrainee',
                dataType: 'json',
                data: { 'EmpCode': _selectedIDsBranch },
                success: function (data) {
                    if (data.MS == "OK") {
                        PartialEmployeeSearch.Hide();
                        GridItems.Refresh();
                    }
                    else {
                        // AlertMessage(data.MS);
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    AlertMessage(XMLHttpRequest.responseText);

                }
            });
        });
        $('#btnAddNew').click(function () {
            PartialEmployeeSearch.Show();
            gvemployeeselector.Refresh();
            gvemployeeselector.UnselectAllRowsOnPage();
        });
        // end popup

    });
    function TrainnerTypeSelectedChanged(s, e) {
        $.ajax({
            type: 'post',
            url: "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + '/SelectTrainer',
            data: { 'Actionname': 'Create','TrainerType':s.GetValue()},
            success: function (data) {
                if (data.MS == "OK") {
                    gvSession.Refresh();
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);
            }
        });
    }
    function OnSelectionChanged(s, e) {
        //e.customArgs["EmpCode"] = "";
        s.GetSelectedFieldValues("EmpCode", GetSelectedFieldValuesCallback);
    }
    function GetSelectedFieldValuesCallback(values) {
        _selectedIDsBranch = "";
        for (var index = 0; index < values.length; index++) {
            _selectedIDsBranch += values[index] + textSeparator;
            test = _selectedIDsBranch;
        }
        if (_selectedIDsBranch.length > 0) {
            _selectedIDsBranch = _selectedIDsBranch.substring(0, _selectedIDsBranch.length - 1);
        }
    }
    function selectCourse(s, e) {
        txtCourseCode.SetValue(s.GetValue());
        $.ajax({
            type: 'post',
            url: _baseUrl + '/Training/Process/TrainingAttendance/SelectCourse',
            data: { 'Code': s.GetValue(),'actionName':"Create"},
            success: function (data) {
                cboSession.PerformCallback();
                cboTopicID.PerformCallback();
                cboStartDate.PerformCallback();
                GridTrinaingAttendee.Refresh();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });

    }
    function Employee_SelectedIndexChanged(s, e) {
        txtAllName.SetValue(s.GetSelectedItem().GetColumnText(1));
    }
    function SelectedIndexChanged_SessionObject() {
        GetTrainees();
        GridTrinaingAttendee.Refresh();
    }
    function selectSession(s, e) {
        txtSession.SetValue(s.GetValue());
        GetTrainees();
        GridTrinaingAttendee.Refresh();
    }
    function EmpDbRowClick(s, e) {
        s.GetRowValues(s.GetFocusedRowIndex(), 'EmpCode;', OnGetRowValuesEmp);
        cboEmployee.HideDropDown();
    }
    function OnGetRowValuesEmp(values) {
        cboEmployee.SetValue(values[0]);
        selectedIDs = values[0];
        ShowDataEmp();
    }
    function rowSelected(s, e) {
        EmployeeGridListSelector.GetRowValues(EmployeeGridListSelector.GetFocusedRowIndex(), 'EmpCode;', OnGetRowValuesEmp);
        cboEmployee.HideDropDown();
    }
    function ShowDataEmp() {
        var total = 0;
        $.ajax({
            type: 'post',
            //url: _baseUrl + '/Training/Process/TRTrainingCatalogueCalendar/ShowDataEmp',
            url: _baseUrl + '/Training/Process/TrainingAttendance/ShowDataEmp',
            data: { 'id': 'TOTAL', 'EmpCode': selectedIDs },
            success: function (data) {
                if (data.MS == "OK") {
                    txtAllName.SetValue(data.AllName);
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
    function selectYear(s, e) {
        $.ajax({
            type: 'post',
            url: _baseUrl + '/Training/Process/TrainingAttendance/SelectYear',
            data: { 'code': s.GetValue(),'actionName':"Create" },
            success: function (data) {
                cboCourse.PerformCallback();
                GridTrinaingAttendee.Refresh();
            }
        });
    }
    function GetTrainees() {
        $.ajax({
            type: 'post',
            url: _baseUrl + '/Training/Process/TrainingAttendance/AddTrainee',
            data: { 'ActionName': "Create", 'SessionCode': txtSession.GetValue(), 'InDate': cboStartDate.GetValue(), 'Topic': cboTopicID.GetValue()},
            success: function (data){
                //alert('GetTrainees' + data.SessionText);
                GridTrinaingAttendee.Refresh();
            }
        });
    }
</script>
<style>
    .groupClass {
        font-weight: bold;
        font-size: 14px;
    }

    .scrolling_Tab span {
        font-weight: bold;
        font-size: 14px;
    }
</style>
@{
    Html.DevExpress().FormLayout(settings =>
    {
        settings.Name = "TRCalendar";
        settings.AlignItemCaptionsInAllGroups = true;
        settings.Width = Unit.Percentage(100);
        settings.Items.AddGroupItem(m => Model.TrainingPlan, g =>
        {
            g.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            g.Caption = "Training Calendar";
            g.ColumnCount = 3;
            //g.GroupBoxStyle.Caption.CssClass = "groupClass";
            g.GridSettings.StretchLastItem = DefaultBoolean.True;
            g.GridSettings.ChangeCaptionLocationAtWidth = 660;
            g.GridSettings.Breakpoints.Add(new LayoutBreakpoint()
            {
                Name = "S",
                ColumnCount = 1,
                MaxWidth = 500 });
            g.GridSettings.Breakpoints.Add(new LayoutBreakpoint() { Name = "M", ColumnCount = 2, MaxWidth = 800 });
            g.CellStyle.Paddings.PaddingBottom = 5;
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("In Year") + "*";
                m.SpanRules.Add(new SpanRule() { BreakpointName = "S", ColumnSpan = 1, RowSpan = 1 });
                m.SpanRules.Add(new SpanRule() { BreakpointName = "M", ColumnSpan = 1, RowSpan = 1 });
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().ComboBoxFor(i => i.TrainingPlan.InYear, s =>
                {
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.TextFormatString = "{1}";
                    s.Properties.ValueField = "InYear";
                    s.Properties.TextField = "InYearName";
                    s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                    s.Properties.ClientSideEvents.SelectedIndexChanged = "selectYear";
                    s.Width = Unit.Percentage(30);
                }).BindList(ViewData["INYEAR"]).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Course Name");
            })
            .SetNestedContent(() =>
            {
                Html.RenderPartial("Course");
                Html.DevExpress().TextBoxFor(i => i.TrainingPlan.CourseID, s =>
                {
                    s.ClientVisible = false;
                    s.Properties.ClientInstanceName = "txtCourseCode";
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
        });

        #region Session Infor
        settings.Items.AddGroupItem(m => Model.TrainingAttendanceModel.TRTrainingSession, g =>
        {
            g.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            g.Caption = "Training Session";
            g.ColumnCount = 3;
            //g.GroupBoxStyle.Caption.CssClass = "groupClass";
            g.GridSettings.StretchLastItem = DefaultBoolean.True;
            g.GridSettings.ChangeCaptionLocationAtWidth = 660;
            g.GridSettings.Breakpoints.Add(new LayoutBreakpoint() { Name = "S", ColumnCount = 1, MaxWidth = 500 });
            g.GridSettings.Breakpoints.Add(new LayoutBreakpoint() { Name = "M", ColumnCount = 2, MaxWidth = 800 });
            g.CellStyle.Paddings.PaddingBottom = 5;
            //g.Items.Add(m =>
            //{
            //    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Session") + "*";
            //})
            //.SetNestedContent(() =>
            //{
            //    Html.RenderPartial("Session");
            //    Html.DevExpress().TextBoxFor(i => i.TrainingAttendanceModel.TRTrainingSession.SessionCode, s =>
            //    {
            //        s.ClientVisible = false;
            //        s.Properties.ClientInstanceName = "txtSession";
            //        s.ShowModelErrors = true;
            //        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
            //        s.Properties.ValidationSettings.SetFocusOnError = true;
            //        s.Properties.ValidationSettings.ErrorText = "*";
            //    }).Render();
            //});
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("InDate") + "*";
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().ComboBoxFor(i => i.TrainingAttendanceModel.TRTrainingSession.StartDate, s =>
                 {
                     //s.ClientVisible = false;
                     s.Properties.ClientInstanceName = "cboStartDate";
                     s.ShowModelErrors = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                     s.CallbackRouteValues = new { Controller = "TrainingAttendance", Action = "SessionDate" };
                     s.Properties.ValueField = "StartDate";
                     s.Properties.TextField = "StartDate";
                     s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                     s.Properties.AllowNull = true;
                     s.Properties.ClientSideEvents.SelectedIndexChanged = "SelectedIndexChanged_SessionObject";
                 }).BindList(Humica.Training.TrainingProcessObject.GetSessionDate()).Render();
             });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Topic/Subject") + "*";
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().ComboBoxFor(i => i.TrainingAttendanceModel.TRTrainingSession.TopicID, s =>
                {
                    //s.ClientVisible = false;
                    s.Properties.ClientInstanceName = "cboTopicID";
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.CallbackRouteValues = new { Controller = "TrainingAttendance", Action = "Topic" };
                    s.Properties.ValueField = "TrainNo";
                    s.Properties.TextField = "Description";
                    s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                    s.Properties.AllowNull = true;
                    s.Properties.DisplayFormatString = "{0:dd-MMM-yyyy}";
                    s.Properties.ClientSideEvents.SelectedIndexChanged = "SelectedIndexChanged_SessionObject";
                }).BindList(Humica.Training.TrainingProcessObject.GetTopic()).Render();
            });
        });
        settings.Items.AddGroupItem(m =>
        {
            m.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
            m.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            m.Caption = "Attendance Information";
        });
        #endregion
    }).GetHtml();
    Html.RenderPartial("GridTrinaingAttendee", Model.TrainingAttendanceModels);

}