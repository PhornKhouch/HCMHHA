@model Humica.Logic.HR.HREmpDepositObject

<script type="text/javascript">

    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_btnSaveActionGrid').click(function () {
            $("form").submit();
        });
    });
    function OnClientValueChanged(s, e) {
        ShowData();
    }

    function ShowDataEmp() {
        $.ajax({
            type: 'post',
            url: _baseUrl + '/HRM/EmployeeInfo/HRStaffDeposit/ShowDataEmp',
            data: { 'EmpCode': selectedIDs},
            success: function (data) {
                if (data.MS == "OK") {
                    var StartDate = data.StartDate;
                    nowDate = new Date(parseInt(StartDate.substr(6)));
                    txtAllName.SetValue(data.AllName);
                    txtEmpType.SetValue(data.EmpType);
                    txtDivision.SetValue(data.Division);
                    txtDepartment.SetValue(data.DEPT);
                    txtSection.SetValue(data.SECT);
                    txtLevel.SetValue(data.LevelCode);
                    txtPosition.SetValue(data.Position);
                    txtStartDate.SetValue(nowDate);
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }

    function EmpDbRowClick(s, e) {
        s.GetRowValues(s.GetFocusedRowIndex(), 'EmpCode;', OnGetRowValuesEmp);
        cboEmployee.HideDropDown();
    }

    function rowSelected(s, e) {
        EmployeeGridListSelector.GetRowValues(EmployeeGridListSelector.GetFocusedRowIndex(), 'EmpCode;', OnGetRowValuesEmp);
        cboEmployee.HideDropDown();
    }
    function OnGetRowValuesEmp(values) {
        cboEmployee.SetValue(values[0]);
        selectedIDs = values[0];
        ShowDataEmp();
    }
    function OnClientValueChanged(s, e) {
        GetData();
    }
    function convert(str) {
        var date = new Date(str),
          mnth = ("0" + (date.getMonth() + 1)).slice(-2),
          day = ("0" + date.getDate()).slice(-2),
          Minutes = ("0" + date.getMinutes()).slice(-2);
        return [date.getFullYear(), mnth, day].join("-");
    }
    function GetData() {
        $.ajax({
            type: 'post',
            url: _baseUrl + '/HRM/EmployeeInfo/HRStaffDeposit/GetData',
            data: { 'FromDate': convert(txtFromDate.GetDate()), 'Period': txtPeriod.GetValue(), 'LoanAmount': txtLoanAmount.GetValue(),'Amount': txtAmount.GetValue() },
            success: function (data) {
                if (data.MS == "OK") {
                    var EndDate = data.ToDate;
                    EDate = new Date(parseInt(EndDate.substr(6)));
                    txtToDate.SetValue(EDate);
                    GridItemDetails.Refresh();
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
</script>

@Html.DevExpress().FormLayout(settings =>
    {
        settings.Name = "LeaveRequest";
        settings.AlignItemCaptionsInAllGroups = true;

        settings.Items.AddGroupItem(m => Model, g =>
        {
            g.ColCount = 3;
            g.GroupBoxDecoration = GroupBoxDecoration.None;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;

            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EmpCode");
            })
                 .SetNestedContent(() =>
                 {
                     Html.DevExpress().DropDownEditFor(i => i.HeaderStaff.EmpCode, s =>
                     {
                         s.Properties.ClientInstanceName = "cboEmployee";
                         s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                         s.Properties.ValidationSettings.SetFocusOnError = true;
                         s.Properties.ValidationSettings.ErrorText = "*";
                         s.SetDropDownWindowTemplateContent(c =>
                         {
                             Html.RenderPartial(Humica.Models.SY.SYListFilter.ListFilterViewEmployee);

                             ViewContext.Writer.Write("<div style=\"padding: 6px; height: 24px;\">");

                             @Html.DevExpress().Button(
                               buttonSettings =>
                               {
                                   buttonSettings.Name = "buttonSelect";
                                   buttonSettings.Text = Humica.EF.Models.SY.SYSettings.getLabel("Ok");
                                   buttonSettings.Style.Add("float", "right");
                                   buttonSettings.Style.Add("margin", "0px 3px");
                                   buttonSettings.ClientSideEvents.Click = "rowSelected";
                                   buttonSettings.Height = 25;
                               }
                                   ).Render();
                             ViewContext.Writer.Write("</div>");

                         });
                         s.Properties.AnimationType = AnimationType.None;
                     }).Render();
                 });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("AllName");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderStaff.AllName, s =>
                {
                    s.Properties.ClientInstanceName = "txtAllName";
                    s.ReadOnly = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EmpType");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().TextBoxFor(i => i.HeaderStaff.EmployeeType, s =>
                 {
                     s.Properties.ClientInstanceName = "txtEmpType";
                     s.ReadOnly = true;
                     s.ShowModelErrors = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                 }).Render();
             });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Division");
            })
           .SetNestedContent(() =>
           {
               Html.DevExpress().TextBoxFor(i => i.HeaderStaff.DivisionDesc, s =>
               {
                   s.Properties.ClientInstanceName = "txtDivision";
                   s.ReadOnly = true;
                   s.ShowModelErrors = true;
                   s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                   s.Properties.ValidationSettings.SetFocusOnError = true;
                   s.Properties.ValidationSettings.ErrorText = "*";
               }).Render();
           });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Department");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Department, s =>
                {
                    s.Properties.ClientInstanceName = "txtDepartment";
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Section");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Section, s =>
                {
                    s.Properties.ClientInstanceName = "txtSection";
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("LevelCode");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Level, s =>
                {
                    s.Properties.ClientInstanceName = "txtLevel";
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Position");
            })
              .SetNestedContent(() =>
              {
                  Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Position, s =>
                  {
                      s.Properties.ClientInstanceName = "txtPosition";
                      s.ReadOnly = true;
                      s.ShowModelErrors = true;
                      s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                      s.Properties.ValidationSettings.SetFocusOnError = true;
                      s.Properties.ValidationSettings.ErrorText = "*";
                  }).Render();
              });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("StartDate");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().DateEditFor(i => i.HeaderStaff.StartDate, s =>
                 {
                     s.Properties.ClientInstanceName = "txtStartDate";
                     s.ReadOnly = true;
                     s.ShowModelErrors = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                     s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                     s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                     s.Properties.ValidationSettings.ErrorText = "*";
                 }).Render();
             });

        });

    }).GetHtml()

@{
    Html.DevExpress().PageControl(settings =>
    {
        settings.Name = "pcScrollingMaterial1";
        settings.Width = Unit.Percentage(100);
        settings.EnableTabScrolling = true;
        settings.TabAlign = TabAlign.Justify;

        settings.Styles.Tab.CssClass = "scrolling_Tab";
        settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("General")).SetContent(() =>
        {
            Html.DevExpress().FormLayout(s1 =>
            {
                s1.Name = "CreateStaff1";
                s1.AlignItemCaptionsInAllGroups = true;

                s1.Items.AddGroupItem(m => Model.Header, g =>
                {
                    g.ColCount = 3;
                    g.GroupBoxDecoration = GroupBoxDecoration.None;
                    g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
                    g.Items.Add(m =>
                    {
                        m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("DeductionType");
                    })
                               .SetNestedContent(() =>
                               {
                                   Html.DevExpress().ComboBoxFor(i => i.Header.DeductionType, s =>
                                   {
                                       s.ShowModelErrors = true;
                                       s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                                       s.Properties.ValidationSettings.SetFocusOnError = true;
                                       s.Properties.AllowNull = true;
                                       s.Properties.ValidationSettings.ErrorText = "*";
                                       s.Properties.TextFormatString = "{0}";
                                       s.Properties.ValueField = "Code";
                                       s.Properties.TextField = "Description";
                                       s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                                   }).BindList(ViewData["DEDUCTION_SELECT"]).Render();
                               });
                    g.Items.Add(m =>
                    {
                        m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Amount");
                    })
                    .SetNestedContent(() =>
                    {
                        Html.DevExpress().SpinEditFor(i => i.Header.Amount, s =>
                        {
                            s.Properties.ClientInstanceName = "txtLoanAmount";
                            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                            s.Properties.ValidationSettings.SetFocusOnError = true;
                            s.Properties.ValidationSettings.ErrorText = "*";
                            s.Properties.DisplayFormatString = "N2";
                            s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                            s.Properties.ClientSideEvents.ValueChanged = "OnClientValueChanged";
                        }).Render();
                    });
                    g.Items.Add(m =>
                    {
                        m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Status");
                    })
                    .SetNestedContent(() =>
                    {
                        Html.DevExpress().TextBoxFor(i => i.Header.Status, s =>
                        {
                            s.ReadOnly = true;
                            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                            s.Properties.ValidationSettings.SetFocusOnError = true;
                            s.Properties.ValidationSettings.ErrorText = "*";
                        }).Render();
                    });
                    g.Items.Add(m =>
                    {
                        m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("FromDate");
                    })
                    .SetNestedContent(() =>
                    {
                        Html.DevExpress().DateEditFor(i => i.Header.FromDate, s =>
                        {
                            s.Properties.ClientInstanceName = "txtFromDate";
                            s.ShowModelErrors = true;
                            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                            s.Properties.ValidationSettings.SetFocusOnError = true;
                            s.Properties.ValidationSettings.ErrorText = "*";
                            s.Properties.PickerType = DatePickerType.Months;
                            s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT_PERIOD].ToString();
                            s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT_PERIOD].ToString();
                            s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT_PERIOD].ToString();
                            s.Properties.ClientSideEvents.ValueChanged = "OnClientValueChanged";
                        }).Render();
                    });
                    g.Items.Add(m =>
                    {
                        m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Period");
                    })
                     .SetNestedContent(() =>
                     {
                         Html.DevExpress().SpinEditFor(i => i.Header.Period, s =>
                         {
                             s.Properties.ClientInstanceName = "txtPeriod";
                             s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                             s.Properties.ValidationSettings.SetFocusOnError = true;
                             s.Properties.ValidationSettings.ErrorText = "*";
                             s.Properties.DisplayFormatString = "N0";
                             s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                             s.Properties.ClientSideEvents.ValueChanged = "OnClientValueChanged";
                         }).Render();
                     });
                    g.Items.Add(m =>
                    {
                        m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("ToDate");
                    })
                    .SetNestedContent(() =>
                    {
                        Html.DevExpress().DateEditFor(i => i.Header.ToDate, s =>
                        {
                            s.ReadOnly = true;
                            s.Properties.ClientInstanceName = "txtToDate";
                            s.ShowModelErrors = true;
                            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                            s.Properties.ValidationSettings.SetFocusOnError = true;
                            s.Properties.ValidationSettings.ErrorText = "*";
                            s.Properties.PickerType = DatePickerType.Months;
                            s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                            s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                            s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                        }).Render();
                    });
                    g.Items.Add(m =>
                    {
                        m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Deposit");
                    })
                     .SetNestedContent(() =>
                     {
                         Html.DevExpress().SpinEditFor(i => i.Header.Deposit, s =>
                         {
                             s.Properties.ClientInstanceName = "txtAmount";
                             s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                             s.Properties.ValidationSettings.SetFocusOnError = true;
                             s.Properties.ValidationSettings.ErrorText = "*";
                             s.Properties.DisplayFormatString = "N2";
                             s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                             s.Properties.ClientSideEvents.ValueChanged = "OnClientValueChanged";
                         }).Render();
                     });
                    g.Items.Add(m =>
                    {
                        m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Remark");
                        m.ColumnSpan = 3;
                    })
                    .SetNestedContent(() =>
                    {
                        Html.DevExpress().TextBoxFor(i => i.Header.Remark, s =>
                        {
                            s.Width = Unit.Percentage(100);
                            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                            s.Properties.ValidationSettings.SetFocusOnError = true;
                            s.Properties.ValidationSettings.ErrorText = "*";
                        }).Render();
                    });
                });
            }).GetHtml();
        });
    }).GetHtml();
@Html.Partial("GridItemDetails", Model.ListHeaderD)
    }
