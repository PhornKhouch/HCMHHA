@model Humica.Logic.PR.PRGenerate_Salary

@Html.DevExpress().FormLayout(settings =>
{
    settings.Name = "FTFilterEmployee";
    settings.AlignItemCaptionsInAllGroups = true;
    int width = 150;
    settings.Items.AddGroupItem(m=>Model.Filter,g=>
    {
        g.ColCount = 3;
        g.GroupBoxDecoration = GroupBoxDecoration.None;
        g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Branch");
        })
            .SetNestedContent(() =>
            {
                Html.DevExpress().DropDownEditFor(i => Model.Filter.Branch, s =>
                {
                    s.Width = 180;
                    s.Properties.ClientInstanceName = "checkComboBoxBranch";
                    //s.SkinID = "CheckComboBox";
                    s.ReadOnly = true;
                    s.SetDropDownWindowTemplateContent(c =>
                    {
                        Html.RenderPartial(Humica.Models.SY.SYListFilter.ListFilterViewBranch);

                        ViewContext.Writer.Write("<div style=\"padding: 6px; height: 24px;\">");
                        @Html.DevExpress().Button(buttonSettings =>
                        {
                            buttonSettings.Name = "buttonCloseBranch";
                            buttonSettings.Text = Humica.EF.Models.SY.SYSettings.getLabel("Ok");
                            buttonSettings.Style.Add("float", "right");
                            buttonSettings.Style.Add("padding", "0px 2px");
                            buttonSettings.ClientSideEvents.Click = "function(s, e){ checkComboBoxBranch.HideDropDown(); }";
                            buttonSettings.Height = 26;
                        }).Render();

                        @Html.DevExpress().Button(buttonSettings =>
                        {
                            buttonSettings.Name = "buttonClearBranch";
                            buttonSettings.Text = Humica.EF.Models.SY.SYSettings.getLabel("Clear");
                            buttonSettings.Style.Add("float", "right");
                            buttonSettings.Style.Add("margin", "0px 3px");
                            buttonSettings.ClientSideEvents.Click = "clearSelectedBranch";
                            buttonSettings.Height = 26;
                        }).Render();
                        ViewContext.Writer.Write("</div>");

                    });
                    s.Properties.AnimationType = AnimationType.None;
                }).Render();
            });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("InMonth");
        })
           .SetNestedContent(() =>
           {
               Html.DevExpress().DateEditFor(i => Model.Filter.InMonth, s =>
               {
                   s.Properties.ClientInstanceName = "txtInMonth";
                   s.ShowModelErrors = true;
                   s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                   s.Properties.ValidationSettings.SetFocusOnError = true;
                   s.Properties.ValidationSettings.ErrorText = "*";
                   s.Properties.PickerType = DatePickerType.Months;
                   s.Properties.NullText = "MMMM-yyyy";
                   s.Properties.EditFormatString = "MMMM-yyyy";
                   s.Properties.DisplayFormatString = "MMMM-yyyy";
                   s.Properties.ClientSideEvents.ValueChanged = "OnClientValueChanged";
               }).Render();
           });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("ExchangeRate(Riels)");
        })
           .SetNestedContent(() =>
           {
               Html.DevExpress().TextBoxFor(i => Model.Filter.ExchangeRate, s =>
               {
                   s.Properties.ClientInstanceName = "txtExchangeRate";
                   s.Enabled = false;
                   s.ShowModelErrors = true;
                   s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                   s.Properties.ValidationSettings.SetFocusOnError = true;
                   s.Properties.ValidationSettings.ErrorText = "*";
                   s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                   s.ControlStyle.Font.Bold = true;
               }).Render();
           });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("ValueDate");
        })
          .SetNestedContent(() =>
          {
              Html.DevExpress().DateEditFor(i => Model.Filter.ValueDate, s =>
              {
                  s.Properties.ClientInstanceName = "txtValueDate";
                  s.ShowModelErrors = true;
                  s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                  s.Properties.ValidationSettings.SetFocusOnError = true;
                  s.Properties.ValidationSettings.ErrorText = "*";
                  s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                  s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                  s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
              }).Render();
          });
    });

}).Bind(Model).GetHtml()