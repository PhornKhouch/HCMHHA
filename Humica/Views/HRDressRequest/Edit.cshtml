@model Humica.Logic.DS.DressRequestObject
<script type="text/javascript">

    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_btnSaveActionGrid').click(function () {
            $("form").submit();
        });
    });
    function approverChange(s, e) {
        ApproverName.SetValue(s.GetSelectedItem().GetColumnText(1));
        gridLevel.SetValue(s.GetSelectedItem().GetColumnText(2));
    }
    function selectParam(s, e) {
        $.ajax({
            type: 'post',
            url: _baseUrl + '/SelfService/LeaveBalance/HRDressRequest/SelectParam',
            data: { 'docType': cboDocType.GetValue(), 'location': cboLocation.GetValue() },
            success: function (data) {
                if (data.MS != "OK") {
                    AlertMessage(data.MS);
                } else {
                    GridItemViewApproval.Refresh();
                    GridItems.Refresh();
                }
            }
        });
    }

</script>
@{
    Html.DevExpress().FormLayout(settings =>
    {
        settings.Name = "Create";
        settings.AlignItemCaptionsInAllGroups = true;
        settings.Items.AddGroupItem(m => Model.Header, g =>
        {
            g.ColCount = 2;
            g.GroupBoxDecoration = GroupBoxDecoration.None;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Employee Code");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().TextBoxFor(i => i.Header.EmpCode, s =>
                 {
                     s.Width = Unit.Percentage(100);
                     s.ShowModelErrors = true;
                     s.ReadOnly = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                 }).Render();
             });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Employee Name");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().TextBoxFor(i => i.Header.EmpName, s =>
                 {
                     s.Width = Unit.Percentage(100);
                     s.ShowModelErrors = true;
                     s.ReadOnly = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                 }).Render();
             });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("DocType");
            })
       .SetNestedContent(() =>
       {
           Html.DevExpress().TextBoxFor(i => i.Header.DocType, s =>
           {
               s.Width = Unit.Percentage(100);
               s.ShowModelErrors = true;
               s.Properties.ClientInstanceName = "cboDocType";
               s.ReadOnly = true;
               s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
               s.Properties.ValidationSettings.SetFocusOnError = true;
               s.Properties.ValidationSettings.ErrorText = "*";
           }).Render();
       });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("DocNo");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().TextBoxFor(i => i.Header.DocNo, s =>
                 {
                     s.Width = Unit.Percentage(100);
                     s.Properties.ClientInstanceName = "txtDocNo";
                     s.ShowModelErrors = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                     s.ReadOnly = true;
                     s.Properties.NullDisplayText = Humica.EF.Models.SY.SYConstant.NEW_RECORD;
                     s.Properties.NullText = Humica.EF.Models.SY.SYConstant.NEW_RECORD;
                 }).Render();
             });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Branch");
            })
     .SetNestedContent(() =>
     {
         Html.DevExpress().ComboBoxFor(i => i.Header.Branch, s =>
         {
             s.Width = Unit.Percentage(100);
             s.Properties.ClientInstanceName = "cboLocation";
             s.ShowModelErrors = true;
             s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
             s.Properties.ValidationSettings.SetFocusOnError = true;
             s.Properties.ValidationSettings.ErrorText = "*";
             s.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
             s.Properties.ValueType = typeof(string);
             s.Properties.ValueField = "Code";
             s.Properties.TextField = "Description";
             s.Properties.TextFormatString = "{0}:{1}";
             s.Properties.Columns.Add("Code", Humica.EF.Models.SY.SYSettings.getLabel("Code"), 60);
             s.Properties.Columns.Add("Description", Humica.EF.Models.SY.SYSettings.getLabel("Description"), 200);
             s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                  ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "_SELECT");
             s.Properties.ClientSideEvents.ValueChanged = "selectParam";
         }).BindList(ViewData["BRANCHES_SELECT"]).Render();

     });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Request Date");
            })
      .SetNestedContent(() =>
      {
          Html.DevExpress().DateEditFor(i => i.Header.RequestDate, s =>
          {
              s.Properties.ClientInstanceName = "txtRequestDate";
              //s.ReadOnly = true;
              s.ShowModelErrors = true;
              s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
              s.Properties.ValidationSettings.SetFocusOnError = true;
              s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
              s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
              s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
              s.Properties.ValidationSettings.ErrorText = "*";
          }).Render();
      });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Vendor Name");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().TextBoxFor(i => i.Header.VendorName, s =>
                 {
                     s.Width = Unit.Percentage(100);
                     s.Properties.ClientInstanceName = "txtVendorName";
                     s.ShowModelErrors = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                 }).Render();
             });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Staff QTY");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().TextBoxFor(i => i.Header.StaffQTY, s =>
                 {
                     s.Width = Unit.Percentage(100);
                     s.Properties.ClientInstanceName = "txtStaffQTY";
                     s.ShowModelErrors = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                 }).Render();
             });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Reason");
                m.ColumnSpan = 2;
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().TextBoxFor(i => i.Header.Description, s =>
                 {
                     s.Width = Unit.Percentage(100);
                     s.ShowModelErrors = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                 }).Render();
             });
                g.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Attach File");
                })
           .SetNestedContent(() =>
           {
               Html.DevExpress().UploadControl(ss =>
               {
                   ss.ShowProgressPanel = true;
                   ss.CallbackRouteValues = new { Controller = "HREmpContract", Action = "UploadControlCallbackActionImage" };
                   ss.Name = "UploadControl";
                   ss.UploadMode = UploadControlUploadMode.Auto;
                   ss.AutoStartUpload = true;
                   ss.Width = 120;
                   ss.DialogTriggerID = "externalDropZone";
                   ss.AdvancedModeSettings.EnableDragAndDrop = false;
                   ss.AdvancedModeSettings.EnableMultiSelect = false;
                   ss.ShowTextBox = false;
                   ss.ShowUploadButton = false;
                   ss.ShowAddRemoveButtons = true;
                   ss.ShowProgressPanel = false;
                   ss.ShowClearFileSelectionButton = false;
                   ss.AdvancedModeSettings.EnableFileList = true;
                   ss.AdvancedModeSettings.FileListPosition = UploadControlFileListPosition.Top;
                   ss.AdvancedModeSettings.ExternalDropZoneID = "externalDropZone";
                   ss.AdvancedModeSettings.DropZoneText = "";
                   ss.ValidationSettings.MaxFileSize = 4194304;
                   ss.BrowseButton.Image.IconID = IconID.ActionsNew16x16;
                   ss.UploadButton.Text = String.Empty;
                   ss.ValidationSettings.AllowedFileExtensions = new string[] { ".jpg", ".jpeg", ".jpe", ".gif", ".bmp", ".png", ".pdf", ".doc", ".docx", ".xls", ".xlsx" };
                   ss.ValidationSettings.ErrorStyle.CssClass = "validationMessage";
                   ss.BrowseButton.Text = Humica.EF.Models.SY.SYSettings.getLabel("");
               }).Render();
               Html.DevExpress().HyperLinkFor(i => i.Header.PathFile,
                    s =>
                    {
                        s.Name = "file_uploaded";
                        s.ToolTip = "File";
                        s.Properties.Target = "_BLANK";
                        s.ClientVisible = true;

                        s.Properties.Text = Humica.EF.Models.SY.SYSettings.getLabel("View");
                    }).GetHtml();
           });
        });
    }).GetHtml();
}
@Html.DevExpress().PageControl(
   settings =>
   {
       settings.Name = "pcScrollingWorkCalendar";
       settings.Width = Unit.Percentage(100);

       settings.EnableTabScrolling = true;
       settings.TabAlign = TabAlign.Justify;

       settings.Styles.Tab.CssClass = "scrolling_Tab";
       settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
       ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "Detail")).SetContent(() =>
       {
           Html.RenderPartial("GridItems", Model.ListItem);
       });
       settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
        ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "ApprovalDetail")).SetContent(() =>
        {
            Html.RenderPartial("GridApproval", Model.ListApproval);
        });


   }).GetHtml()