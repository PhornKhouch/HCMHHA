@model Humica.Logic.DS.DressReturnObject
<script type="text/javascript">

    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_btnSaveActionGrid').hide(function () {
            /*$("form").submit();*/
        });
         $('#_bthEditAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + "Edit?id=@ViewData[Humica.EF.Models.SY.SYConstant.PARAM_ID].ToString()";
        });
        $('#_btnPrintction').click(function () {
            ss = 3;
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + "Print?id=@ViewData[Humica.EF.Models.SY.SYConstant.PARAM_ID].ToString()";
        });
         $('#_btnDeleteAction').click(function () {
            ss = 4;
            ConfirmMessage("@Humica.EF.Models.SY.SYMessages.getMessage("DELETE_C", Humica.EF.MD.SYSession.getSessionUser().Lang)");
        });
        $('#pageToolbar_DXI4_').hide(function () {
        });

        $('#pageToolbar_DXI3_T').hide();
        $('#pageToolbar_DXI3i0_').hide();
        $('#pageToolbar_DXI3i1_').hide();
        $('#pageToolbar_DXI3i2_').hide();
        $('#UploadControl_Browse0').hide();

    });
    function _clickConfirm(s, e) {
        if (s.GetText() == "@Humica.EF.Models.SY.SYConstant.OK") {
            if (ss == 4) {
                window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + "Delete?id=@ViewData[Humica.EF.Models.SY.SYConstant.PARAM_ID].ToString()";
            }
        }
        
    }
</script>
<style>
    #file_uploaded {
        transform: translateY(10px);
    }
</style>
@{
    Html.DevExpress().FormLayout(settings =>
    {
        settings.Name = "Create";
        settings.AlignItemCaptionsInAllGroups = true;
        settings.Items.AddGroupItem(m => Model.Header, g =>
        {
            g.ColCount = 2;
            g.GroupBoxDecoration = GroupBoxDecoration.None;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Employee Code");
            })
           .SetNestedContent(() =>
           {
               Html.DevExpress().TextBoxFor(i => i.Header.EmpCode, s =>
               {
                   s.Width = Unit.Percentage(100);
                   s.ShowModelErrors = true;
                   s.ReadOnly = true;
                   s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                   s.Properties.ValidationSettings.SetFocusOnError = true;
                   s.Properties.ValidationSettings.ErrorText = "*";
               }).Render();
           });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Employee Name");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().TextBoxFor(i => i.HeaderStaff.AllName, s =>
                 {
                     s.Width = Unit.Percentage(100);
                     s.ShowModelErrors = true;
                     s.ReadOnly = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                 }).Render();
             });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("DocType");
            })
                .SetNestedContent(() =>
                {
                    Html.DevExpress().ComboBoxFor(i => i.Header.DocType, s =>
                    {
                        s.Width = Unit.Percentage(100);
                        s.Properties.ClientInstanceName = "cboDocType";
                        s.ShowModelErrors = true;
                        s.ReadOnly = true;
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                        s.Properties.ValidationSettings.SetFocusOnError = true;
                        s.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

                    }).Render();
                });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Branch") ;
            })
               .SetNestedContent(() =>
               {
                   Html.DevExpress().ComboBoxFor(i => i.Header.Branch, s =>
                   {
                       s.Width = Unit.Percentage(100);
                       s.ShowModelErrors = true;
                       s.ReadOnly = true;
                       s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                       s.Properties.ValidationSettings.SetFocusOnError = true;
                       s.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

                   }).Render();
               });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("DocNo");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().TextBoxFor(i => i.Header.DocNo, s =>
                 {
                     s.Width = Unit.Percentage(100);
                     s.Properties.ClientInstanceName = "txtDocNo";
                     s.ShowModelErrors = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                     s.ReadOnly = true;
                     s.Properties.NullDisplayText = Humica.EF.Models.SY.SYConstant.NEW_RECORD;
                     s.Properties.NullText = Humica.EF.Models.SY.SYConstant.NEW_RECORD;
                 }).Render();
             });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("ReturnDate");
            })
       .SetNestedContent(() =>
       {
           Html.DevExpress().DateEditFor(i => i.Header.ReturnDate, s =>
           {
               s.Properties.ClientInstanceName = "txtReturnDate";
               s.ReadOnly = true;
               s.Width = Unit.Percentage(100);
               s.ShowModelErrors = true;
               s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
               s.Properties.ValidationSettings.SetFocusOnError = true;
               s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
               s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
               s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
               s.Properties.ValidationSettings.ErrorText = "*";
           }).Render();
       });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Reason");
                m.ColumnSpan = 2;
            })
           .SetNestedContent(() =>
           {
               Html.DevExpress().TextBoxFor(i => i.Header.Description, s =>
               {
                   s.Width = Unit.Percentage(100);
                   s.ShowModelErrors = true;
                   s.ReadOnly = true;
                   s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                   s.Properties.ValidationSettings.SetFocusOnError = true;
                   s.Properties.ValidationSettings.ErrorText = "*";
               }).Render();
           });
                g.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Attach File");
                })
           .SetNestedContent(() =>
           {
               Html.DevExpress().UploadControl(ss =>
               {
                   ss.ShowProgressPanel = true;
                   ss.CallbackRouteValues = new { Controller = "HRDressReturn", Action = "UploadControlCallbackActionImage" };
                   ss.Name = "UploadControl";
                   ss.UploadMode = UploadControlUploadMode.Auto;
                   ss.AutoStartUpload = true;
                   ss.Width = 120;
                   ss.DialogTriggerID = "externalDropZone";
                   ss.AdvancedModeSettings.EnableDragAndDrop = false;
                   ss.AdvancedModeSettings.EnableMultiSelect = false;
                   ss.ShowTextBox = false;
                   ss.ShowUploadButton = false;
                   ss.ShowAddRemoveButtons = true;
                   ss.ShowProgressPanel = true;
                   ss.ShowClearFileSelectionButton = true;
                   ss.AdvancedModeSettings.EnableFileList = true;
                   ss.AdvancedModeSettings.FileListPosition = UploadControlFileListPosition.Top;
                   ss.AdvancedModeSettings.ExternalDropZoneID = "externalDropZone";
                   ss.AdvancedModeSettings.DropZoneText = "";
                   ss.ValidationSettings.MaxFileSize = 4194304;
                   ss.BrowseButton.Image.IconID = IconID.ActionsNew16x16;
                   ss.UploadButton.Text = String.Empty;
                   ss.ValidationSettings.AllowedFileExtensions = new string[] { ".jpg", ".jpeg", ".jpe", ".gif", ".bmp", ".png", ".pdf", ".doc", ".docx", ".xls", ".xlsx" };
                   ss.ValidationSettings.ErrorStyle.CssClass = "validationMessage";
                   ss.BrowseButton.Text = Humica.EF.Models.SY.SYSettings.getLabel("");
                   ss.ClientSideEvents.FileUploadComplete = "completedUploadFileItem";
               }).Render();

               Html.DevExpress().HyperLinkFor(i => i.Header.PathFile,
                       s =>
                       {
                           s.Name = "file_uploaded";
                           s.ToolTip = "File";
                           s.Properties.Target = "_BLANK";
                           s.ClientVisible = true;
                           s.Properties.Text = Humica.EF.Models.SY.SYSettings.getLabel("View");
                       }).GetHtml();
                });
        });
    }).GetHtml();
}
@Html.DevExpress().PageControl(
   settings =>
   {
       settings.Name = "pcScrollingWorkCalendar";
       settings.Width = Unit.Percentage(100);

       settings.EnableTabScrolling = true;
       settings.TabAlign = TabAlign.Justify;

       settings.Styles.Tab.CssClass = "scrolling_Tab";
       settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
       ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "Detail")).SetContent(() =>
       {
           Html.RenderPartial("GridItemV", Model.ListItem);
       });
       


   }).GetHtml()