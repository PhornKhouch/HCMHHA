@model Humica.EF.Models.SY.SYUserObject

<script type="text/javascript">

    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL].ToString()";
        });

        $('#_btnSaveActionGrid').click(function () {
            $('form').submit();
        });
    });
    var selectedRoleIDs = "";
    var selectedRoleIDAPPs = "";
    var selectedDataIDs = "";
    var selectedIDs = "";

    function OnBeginRoleCallback(s, e) {
        //Pass all selected keys to GridView callback action
        e.customArgs["selectedRoleIDs"] = selectedRoleIDs;
    }

    function OnSelectionRoleChanged(s, e) {
        var key = s.GetVisibleSelectedNodeKeys();
        selectedRoleIDs = key.join(';');
        RoleSelected.SetValue(selectedRoleIDs);
    }
    function OnBeginRoleCallbackAPP(s, e) {
        //Pass all selected keys to GridView callback action
        e.customArgs["selectedRoleIDAPPs"] = selectedRoleIDs;
    }

    function OnSelectionRoleChangedAPP(s, e) {
        var key = s.GetVisibleSelectedNodeKeys();
        selectedRoleIDAPPs = key.join(';');
        RoleSelectedAPP.SetValue(selectedRoleIDAPPs);
    }

    function OnBeginDataCallback(s, e) {
        //Pass all selected keys to GridView callback action
        e.customArgs["selectedRoleIDs"] = selectedDataIDs;
    }

    function OnSelectionDataChanged(s, e) {
        var key = s.GetVisibleSelectedNodeKeys();
        selectedDataIDs = key.join(';');
        DataSelected.SetValue(selectedDataIDs);
    }

    function UserTypeChange(s,e)
    {

    }
    function OnSelectionChanged(s, e) {
        var key = s.GetVisibleSelectedNodeKeys();
        selectedIDs = key.join(';');
        StorageSelected.SetValue(selectedIDs);
    }
    function OnSelectionLevelChanged(s, e) {
        var key = s.GetVisibleSelectedNodeKeys();
        selectedIDs = key.join(';');
        LevelSelected.SetValue(selectedIDs);
    }
</script>

<script type="text/javascript" src="~/Content/NUser.js">

</script>


@Html.DevExpress().FormLayout(settings =>
{


    settings.Name = "MaterialCreate";
    settings.AlignItemCaptionsInAllGroups = true;

    settings.Items.AddGroupItem(m => Model.User, g =>
    {
        g.ColCount = 2;
        g.GroupBoxDecoration = GroupBoxDecoration.None;
        g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Right;


        g.Items
            .Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                    ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "UserName");

            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.UserObject.UserName, s =>
                {
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });

        g.Items
          .Add(m =>
          {
              m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                  ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "LoginName");

          })
          .SetNestedContent(() =>
          {
              Html.DevExpress().TextBoxFor(i => i.UserObject.LoginName, s =>
              {
                  s.ShowModelErrors = true;
                  s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                  s.Properties.ValidationSettings.SetFocusOnError = true;
                  s.Properties.ValidationSettings.ErrorText = "*";
              }).Render();
          });

        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "Email");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.UserObject.Email, s =>
            {
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "ExpireDate");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().DateEditFor(i => i.UserObject.ExpireDate, s =>
            {
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
            }).Render();
        });

        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "Password");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.UserObject.Password, s =>
            {
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.Password = s.Name.Contains("Password");
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });

        g.Items
      .Add(m =>
      {
          m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
              ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "RePassword");

      })
      .SetNestedContent(() =>
      {
          Html.DevExpress().TextBox(s =>
          {
              s.Name = "RePassword";
              s.ShowModelErrors = true;
              s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
              s.Properties.Password = s.Name.Contains("Password");
              s.Properties.ValidationSettings.SetFocusOnError = true;
              s.Properties.ValidationSettings.ErrorText = "*";
          }).Render();
      });


        g.Items
         .Add(m =>
         {
             m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                 ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "CompanyOwner");

         })
         .SetNestedContent(() =>
         {
             Html.DevExpress().ComboBoxFor(i => i.UserObject.CompanyOwner, s =>
             {
                 s.Properties.ClientInstanceName = "CompanyOwner";
                 s.ShowModelErrors = true;
                 s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                 s.Properties.ValidationSettings.SetFocusOnError = true;
                 s.Properties.ValidationSettings.ErrorText = "*";
                 s.Properties.ValueField = "CompanyCode";
                 s.Properties.TextField = "CompENG";
                 s.Properties.Columns.Add("CompanyCode", Humica.EF.Models.SY.SYSettings.getLabel("Code"));
                 s.Properties.Columns.Add("CompENG", Humica.EF.Models.SY.SYSettings.getLabel("Description"));
                 s.Properties.TextFormatString = "{1}";
             }).BindList(ViewData["DLR_LIST"]).Render();
         });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "Log and Change");
        })
       .SetNestedContent(() =>
       {
           Html.DevExpress().CheckBoxFor(i => i.UserObject.IsFirstLogChange, s =>
           {
               s.ShowModelErrors = true;
               s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
               s.Properties.ValidationSettings.SetFocusOnError = true;
               s.Properties.ValidationSettings.ErrorText = "*";
           }).Render();
       });

    });


    //settings.Items.AddGroupItem(m => Model.User, g =>
    //{
    //    g.ColCount = 2;
    //    g.GroupBoxDecoration = GroupBoxDecoration.None;
    //    g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Right;



    //    //g.Items
    //    //    .Add(m =>
    //    //    {
    //    //        m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
    //    //            ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "UserType");

    //    //    })
    //    //    .SetNestedContent(() =>
    //    //    {
    //    //        Html.DevExpress().ComboBoxFor(i => i.UserObject.UserType, s =>
    //    //        {
    //    //            s.ShowModelErrors = true;
    //    //            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
    //    //            s.Properties.ValidationSettings.SetFocusOnError = true;
    //    //            s.Properties.ValidationSettings.ErrorText = "*";
    //    //            s.Properties.ValueField = "SelectValue";
    //    //            s.Properties.TextField = "SelectText";
    //    //            s.Properties.ClientSideEvents.SelectedIndexChanged = "UserTypeChange";
    //    //        }).BindList(ViewData["USER_TYPE"]).Render();
    //    //    });


    //});


    //settings.Items.AddGroupItem(m => Model.UserObject, g =>
    //{
    //    g.ColCount = 2;
    //    g.GroupBoxDecoration = GroupBoxDecoration.None;
    //    g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Right;

    //    //g.Items
    //    //   .Add(m =>
    //    //   {
    //    //       m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
    //    //           ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "IsFirstLogChange");

    //    //   })
    //    //   .SetNestedContent(() =>
    //    //   {
    //    //       Html.DevExpress().CheckBoxFor(i => i.UserObject.IsFirstLogChange, s =>
    //    //       {
    //    //           s.ShowModelErrors = true;
    //    //           s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
    //    //           s.Properties.ValidationSettings.SetFocusOnError = true;
    //    //           s.Properties.ValidationSettings.ErrorText = "*";
    //    //       }).Render();
    //    //   });




    //    // g.Items
    //    //.Add(m =>
    //    //{
    //    //    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
    //    //        ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "IsApprover");

    //    //})
    //    //.SetNestedContent(() =>
    //    //{
    //    //    Html.DevExpress().CheckBoxFor(i => i.UserObject.IsApprover, s =>
    //    //    {
    //    //        s.ShowModelErrors = true;
    //    //        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
    //    //        s.Properties.ValidationSettings.SetFocusOnError = true;
    //    //        s.Properties.ValidationSettings.ErrorText = "*";
    //    //    }).Render();
    //    //});



    //});

}).GetHtml()

@Html.DevExpress().TextBox(s =>
{
    s.Name = "RoleSelected";
    s.Text = Model.RoleSelected;
    s.ClientVisible = false;
}).GetHtml()
@Html.DevExpress().TextBox(s =>
             {
                 s.Name = "RoleSelectedAPP";
                 s.Text = Model.RoleSelectedAPP;
                 s.ClientVisible = false;
             }).GetHtml()
@Html.DevExpress().TextBox(s =>
             {
                 s.Name = "DataSelected";
                 s.Text = Model.DataSelected;
                 s.ClientVisible = false;
             }).GetHtml()
@Html.DevExpress().TextBox(s =>
{
    s.Name = "StorageSelected";
    s.Text = Model.StorageSelected;
    s.ClientVisible = false;
}).GetHtml()

@Html.DevExpress().TextBox(s =>
{
    s.Name = "LevelSelected";
    s.Text = Model.LevelSelected;
    s.ClientVisible = false;
}).GetHtml()

@Html.DevExpress().PageControl(
    settings =>
    {
        settings.Name = "pcScrollingMaterial1";
        settings.Width = Unit.Percentage(100);

        settings.EnableTabScrolling = true;
        settings.TabAlign = TabAlign.Justify;

        settings.Styles.Tab.CssClass = "scrolling_Tab";

        settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>
       )ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "TAP_1")).SetContent(() =>
       {
           ViewContext.Writer.Write("<div id='role_acess'>");
           @Html.RenderPartial("TreeRole", Model);
            ViewContext.Writer.Write("</div>");

       });
        settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>
       )ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "Level")).SetContent(() =>
       {
           ViewContext.Writer.Write("<div id='data_acess'>");
           @Html.RenderPartial("TreeLevelStorage", Model);
           ViewContext.Writer.Write("</div>");
           // @Html.RenderPartial("GridItems", Model);

       });

        settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>
        )ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "Branch")).SetContent(() =>
        {
            ViewContext.Writer.Write("<div id='data_acess'>");
            @Html.RenderPartial("TreeStorage", Model);
            ViewContext.Writer.Write("</div>");
        });

        settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>
     )ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "Role & Permission Mobile")).SetContent(() =>
     {
         ViewContext.Writer.Write("<div id='role_acess'>");
         @Html.RenderPartial("TreeRoleAPP", Model);
         ViewContext.Writer.Write("</div>");
     });

    }).GetHtml()
