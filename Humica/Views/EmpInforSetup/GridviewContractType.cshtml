@{
    var grid = Html.DevExpress().GridView(
       settings =>
       {

           settings.Name = "gridViewItem7";
           settings.KeyFieldName = "Code";

           settings.Width = Unit.Percentage(100);
           settings.SettingsEditing.Mode = GridViewEditingMode.Inline;

           settings.CallbackRouteValues = new { Controller = "EmpInforSetup", Action = "GridItemContractTypes" };

           settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "EmpInforSetup", Action = "CreateContractType" };
           settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "EmpInforSetup", Action = "EditContractType" };
           settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "EmpInforSetup", Action = "DeleteContractType" };

           settings.SettingsSearchPanel.Visible = true;
           settings.CommandColumn.Visible = true;
           settings.CommandColumn.ShowDeleteButton = true;
           settings.CommandColumn.FixedStyle = GridViewColumnFixedStyle.Left;
           settings.CommandColumn.ShowNewButtonInHeader = true;
           settings.CommandColumn.ShowCancelButton = true;
           settings.CommandColumn.ShowEditButton = true;
           settings.SettingsBehavior.AllowFocusedRow = true;
           settings.SettingsBehavior.ConfirmDelete = true;

           settings.Columns.Add(column =>
           {
               column.Width = 80;
               column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Code");
               column.FieldName = "Code";

           });
           settings.Columns.Add(column =>
           {
               column.Width = 250;
               column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Description");
               column.FieldName = "Description";

           });
           settings.Columns.Add(column =>
           {
               column.Width = 200;
               column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Second Description");
               column.FieldName = "SecDescription";
           });
           settings.Columns.Add(column =>
           {
               column.Width = 100;
               column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("TemplateDoc");
               column.FieldName = "TemplatePath";
               column.SetDataItemTemplateContent(container =>
               {
                   var attachment = Convert.ToString(DataBinder.Eval(container.DataItem, "TemplatePath"));
                   if (!(attachment == null || attachment == ""))
                   {
                       Html.DevExpress().HyperLink(hyperlink =>
                       {
                           hyperlink.Name = "file_Con" + container.VisibleIndex;
                           hyperlink.Properties.Text = Humica.EF.Models.SY.SYSettings.getLabel("View");
                           hyperlink.Properties.Target = "_BLANK";
                           hyperlink.NavigateUrl = attachment;
                       }).Render();
                   }
               });

               column.SetEditItemTemplateContent(c =>
               {
                   Html.DevExpress().UploadControl(ss =>
                   {
                       ss.ShowProgressPanel = true;
                       ss.CallbackRouteValues = new { Controller = "EmpInforSetup", Action = "UploadControlCallbackActionImage" };
                       ss.Name = "FileUploadOPB";
                       ss.UploadMode = UploadControlUploadMode.Auto;
                       ss.AutoStartUpload = true;
                       ss.Width = 80;
                       ss.DialogTriggerID = "externalDropZone";
                       ss.AdvancedModeSettings.EnableDragAndDrop = false;
                       ss.AdvancedModeSettings.EnableMultiSelect = false;
                       ss.ShowTextBox = false;
                       ss.ShowUploadButton = false;
                       ss.ShowAddRemoveButtons = false;
                       ss.ShowProgressPanel = true;
                       ss.ShowClearFileSelectionButton = true;
                       ss.AdvancedModeSettings.EnableFileList = true;
                       ss.AdvancedModeSettings.FileListPosition = UploadControlFileListPosition.Top;
                       ss.AdvancedModeSettings.ExternalDropZoneID = "externalDropZone";
                       ss.AdvancedModeSettings.DropZoneText = "";
                       ss.ValidationSettings.MaxFileSize = 4194304;
                       ss.BrowseButton.Image.IconID = IconID.ActionsNew16x16;
                       ss.ValidationSettings.AllowedFileExtensions = new string[] { ".doc", ".docx" };
                       ss.ValidationSettings.ErrorStyle.CssClass = "validationMessage";
                       ss.BrowseButton.Text = Humica.EF.Models.SY.SYSettings.getLabel("");
                       ss.ClientSideEvents.FileUploadComplete = "completedUploadFileItem";
                   }).Render();

                   Html.DevExpress().HyperLink(
                   s =>
                   {
                       s.Name = "file_uploaded";
                       s.ToolTip = "File";
                       s.ClientVisible = false;
                       s.Properties.Target = "_BLANK";
                       s.Properties.Text = Humica.EF.Models.SY.SYSettings.getLabel("View");

                   }).GetHtml();

               });
           });
           settings.Columns.Add(column =>
           {
               column.Width = 120;
               column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("TemplateDocKhm");
               column.FieldName = "TemplateNameKhm";
               column.SetDataItemTemplateContent(container =>
               {
                   var attachment = Convert.ToString(DataBinder.Eval(container.DataItem, "TemplateNameKhm"));
                   if (!(attachment == null || attachment == ""))
                   {
                       Html.DevExpress().HyperLink(hyperlink =>
                       {
                           hyperlink.Name = "fileKH_Con" + container.VisibleIndex;
                           hyperlink.Properties.Text = Humica.EF.Models.SY.SYSettings.getLabel("View");
                           hyperlink.Properties.Target = "_BLANKKH";
                           hyperlink.NavigateUrl = attachment;
                       }).Render();
                   }
               });

               column.SetEditItemTemplateContent(c =>
               {
                   Html.DevExpress().UploadControl(ss =>
                   {
                       ss.ShowProgressPanel = true;
                       ss.CallbackRouteValues = new { Controller = "EmpInforSetup", Action = "UploadControlCallbackActionKH" };
                       ss.Name = "FileUploadOPBKH";
                       ss.UploadMode = UploadControlUploadMode.Auto;
                       ss.AutoStartUpload = true;
                       ss.Width = 80;
                       ss.DialogTriggerID = "externalDropZone1";
                       ss.AdvancedModeSettings.EnableDragAndDrop = false;
                       ss.AdvancedModeSettings.EnableMultiSelect = false;
                       ss.ShowTextBox = false;
                       ss.ShowUploadButton = false;
                       ss.ShowAddRemoveButtons = false;
                       ss.ShowProgressPanel = true;
                       ss.ShowClearFileSelectionButton = true;
                       ss.AdvancedModeSettings.EnableFileList = true;
                       ss.AdvancedModeSettings.FileListPosition = UploadControlFileListPosition.Top;
                       ss.AdvancedModeSettings.ExternalDropZoneID = "externalDropZone1";
                       ss.AdvancedModeSettings.DropZoneText = "";
                       ss.ValidationSettings.MaxFileSize = 4194304;
                       ss.BrowseButton.Image.IconID = IconID.ActionsNew16x16;
                       ss.ValidationSettings.AllowedFileExtensions = new string[] { ".doc", ".docx" };
                       ss.ValidationSettings.ErrorStyle.CssClass = "validationMessage";
                       ss.BrowseButton.Text = Humica.EF.Models.SY.SYSettings.getLabel("");
                       ss.ClientSideEvents.FileUploadComplete = "completedUploadFileItem1";
                   }).Render();

                   Html.DevExpress().HyperLink(
                   s =>
                   {
                       s.Name = "file_uploaded1";
                       s.ToolTip = "File1";
                       s.ClientVisible = false;
                       s.Properties.Target = "_BLANKKH";
                       s.Properties.Text = Humica.EF.Models.SY.SYSettings.getLabel("View");

                   }).GetHtml();

               });
           });
           settings.Columns.Add(column =>
           {
               column.Width = 120;
               column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Is UDC?");
               column.FieldName = "IsUDC";
               column.ColumnType = MVCxGridViewColumnType.CheckBox;

           });
           settings.Columns.Add(column =>
           {
               column.Width = 150;
               column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Remark");
               column.FieldName = "Remark";

           });

           settings.Settings.VerticalScrollBarMode = ScrollBarMode.Hidden;
           settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
           settings.Settings.ShowHeaderFilterButton = true;

           settings.SettingsPager.PageSize = 15;
           settings.SettingsPager.EnableAdaptivity = true;
           settings.SettingsPager.PageSizeItemSettings.Visible = true;

           settings.SettingsExport.EnableClientSideExportAPI = true;
           settings.SettingsExport.ExportSelectedRowsOnly = true;
           settings.SettingsBehavior.AllowFocusedRow = true;

           settings.CustomJSProperties = (sender, e) =>
           {
               e.Properties["cpVisibleRowCount"] = (sender as MVCxGridView).VisibleRowCount;
           };

           settings.CellEditorInitialize = (s, e) =>
           {
               ASPxEdit editor = (ASPxEdit)e.Editor;
               editor.ValidationSettings.Display = Display.Dynamic;
               if (e.KeyValue != null)
               {
                   if (e.Column.FieldName == "Code")
                   {
                       e.Editor.ReadOnly = true;
                   }
               }

               if (e.Column.FieldName == "Status")
               {
                   //e.Editor.ReadOnly = true;
               }
           };


       });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

