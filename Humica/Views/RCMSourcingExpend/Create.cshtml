@model Humica.Logic.RCM.RCMSourcingExpendObject

<script type="text/javascript">

    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_btnSaveActionGrid').click(function () {
            $("form").submit();
        });
    });
    function SelectVac(s, e) {
        txtCode.SetValue(s.GetSelectedItem().GetColumnText(1));
        ShowDataEmp();
    }
    function Selected(s, e) {
        txtIntVName.SetValue(s.GetSelectedItem().GetColumnText(1));
        txtIntVPosition.SetValue(s.GetSelectedItem().GetColumnText(2));
    }
    function SelectExpendType(s, e) {
        txtCarDescrition.SetValue(s.GetSelectedItem().GetColumnText(1));
    }
    function OnClientValueChanged(s, e) {
        GetData();
    }
    function ShowDataEmp() {
        var total = 0;
        $.ajax({
            type: 'post',
            url: _baseUrl + '/HRM/RCM/RCMSourcingExpend/ShowDataEmp',
            data: { 'ID': selectedIDs, 'Action': 'Create' },
            success: function (data) {
                if (data.MS == "OK") {
                    var StartDate = data.StartDate;
                    nowDate = new Date(parseInt(StartDate.substr(6)));
                    txtPlateNoCar.SetValue(data.PlateNoCar);
                    txtCarDescrition.SetValue(data.CarDescrition);
                    txtDriverCode.SetValue(data.DriverCode);
                    txtDriverName.SetValue(data.DriverName);
                    txtBookingDate.SetValue(nowDate);
                    txtStartTime.SetValue(data.StartTime);
                    txtEndTime.SetValue(data.EndTime);
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
</script>
<style>
</style>

@{

    Html.DevExpress().FormLayout(settings =>
    {

        settings.Name = "LeaveRequest";
        settings.AlignItemCaptionsInAllGroups = true;

        settings.Items.AddGroupItem(m => Model.Header, g =>
        {

            g.ColCount = 2;
            g.GroupBoxDecoration = GroupBoxDecoration.None;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("ExpendType");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().ComboBoxFor(i => i.Header.ExpendType, s =>
                {
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    //s.Properties.ValidationSettings.Display = Display.None;
                    s.Properties.TextFormatString = "{0}:{1}";
                    s.Properties.ValueField = "Code";
                    s.Properties.TextField = "Description";
                    s.Properties.Columns.Add("Code", Humica.EF.Models.SY.SYSettings.getLabel("Code"));
                    s.Properties.Columns.Add("Description", Humica.EF.Models.SY.SYSettings.getLabel("Description"));
                    //s.Properties.ClientSideEvents.SelectedIndexChanged = "SelectVac";
                    s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                }).BindList(ViewData["AdvTypes_SELECT"]).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("VacancyNumber");

            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().ComboBoxFor(i => i.Header.VacancyNumber, s =>
                {
                    s.Properties.ClientInstanceName = "txtVacancyNumber";
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.TextFormatString = "{0}:{1}";
                    s.Properties.ValueField = "Code";
                    s.Properties.Columns.Add("Code", Humica.EF.Models.SY.SYSettings.getLabel("Code"));
                    s.Properties.Columns.Add("Description", Humica.EF.Models.SY.SYSettings.getLabel("Description"));
                    s.Properties.ClientSideEvents.SelectedIndexChanged = "SelectVac";
                    s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                }).BindList(ViewData["CODE_SELECT"]).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "DocumentDate");
                m.ColSpan = 1;
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().DateEditFor(i => i.Header.DocumentDate, s =>
                {

                    s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Date = DateTime.Now;
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "Amount");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().SpinEditFor(i => i.Header.Amount, s =>
                {
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.DisplayFormatString = "N";
                    s.Properties.NumberType = SpinEditNumberType.Float;
                    s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                    s.Properties.MinValue = 1;
                    s.Properties.MaxValue = 9999999999999;
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Document Reference");
                m.ColSpan = 2;
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.Header.DocumentReference, s =>
                {
                    s.Width = Unit.Percentage(100);
                    s.Properties.ClientInstanceName = "txtDocumentReference";
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Remark") + "*";
                m.ColSpan = 2;
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.Header.Remark, s =>
                {
                    s.Width = Unit.Percentage(100);
                    s.Properties.ClientInstanceName = "txtRemark";
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Attach File");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().UploadControl(ss =>
                {
                    ss.ShowProgressPanel = true;
                    ss.CallbackRouteValues = new { Controller = "RCMSourcingExpend", Action = "UploadControlCallbackActionImage" };
                    ss.Name = "UploadControl";
                    ss.UploadMode = UploadControlUploadMode.Auto;
                    ss.AutoStartUpload = true;
                    ss.Width = 120;
                    ss.DialogTriggerID = "externalDropZone";
                    ss.AdvancedModeSettings.EnableDragAndDrop = false;
                    ss.AdvancedModeSettings.EnableMultiSelect = false;
                    ss.ShowTextBox = false;
                    ss.ShowUploadButton = false;
                    ss.ShowAddRemoveButtons = true;
                    ss.ShowProgressPanel = true;
                    ss.ShowClearFileSelectionButton = true;
                    ss.AdvancedModeSettings.EnableFileList = true;
                    ss.AdvancedModeSettings.FileListPosition = UploadControlFileListPosition.Top;
                    ss.AdvancedModeSettings.ExternalDropZoneID = "externalDropZone";
                    ss.AdvancedModeSettings.DropZoneText = "";
                    ss.ValidationSettings.MaxFileSize = 4194304;
                    ss.BrowseButton.Image.IconID = IconID.ActionsNew16x16;
                    ss.UploadButton.Text = String.Empty;
                    ss.ValidationSettings.AllowedFileExtensions = new string[] { ".jpg", ".jpeg", ".pdf", ".png", ".doc", ".docx", ".xls", ".xlsx", ".txt" };
                    ss.ValidationSettings.ErrorStyle.CssClass = "validationMessage";
                    ss.BrowseButton.Text = Humica.EF.Models.SY.SYSettings.getLabel("");
                    ss.ClientSideEvents.FileUploadComplete = "completedUploadFileItem";
                }).Render();
                Html.DevExpress().HyperLink(s =>
                {
                    s.Name = "file_uploaded";
                    s.ToolTip = "File";
                    s.ClientVisible = false;
                    s.Properties.Target = "_BLANK";
                    s.Properties.Text = Humica.EF.Models.SY.SYSettings.getLabel("View");
                }).GetHtml();
            });

        });
    }).GetHtml();

}


