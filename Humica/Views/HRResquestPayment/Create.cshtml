@model  Humica.Logic.MD.ClsHRResquestPayment

<script type="text/javascript">

    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_btnSaveActionGrid').click(function () {
            $("form").submit();
        });
    });
    function approverChange(s, e) {
        gridLevel.SetValue(s.GetSelectedItem().GetColumnText(2));
    }
    function selectParam(s, e) {
        $.ajax({
            type: 'post',
            url: _baseUrl + '/SelfService/MyTeam/HRResquestPayment/SelectParam',
            data: { 'docType': cboDocType.GetValue(), 'location': cboLocation.GetValue() },
            success: function (data) {
                if (data.MS != "OK") {
                    AlertMessage(data.MS);
                } else {
                    GridItemViewApproval.Refresh();
                }
            }
        });
    }
    function Refreshvalue() {
        var total = 0;
        $.ajax({
            type: 'post',
            url: _baseUrl + '/SelfService/MyTeam/HRResquestPayment/Refreshvalue',
            data: { 'id': 'TOTAL', 'action': 'Create' },
            success: function (data) {
                if (data.MS == "OK") {
                    txtTOTALReq.SetValue(data.TOTALReq);
                    txtTOTALRev.SetValue(data.TOTALRev);
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
    function EndCallBack(s, e) {
        Refreshvalue();
    }
</script>
@{
    Html.DevExpress().FormLayout(settings =>
    {

        settings.Name = "CreateHRRequestPayment";
        settings.AlignItemCaptionsInAllGroups = true;
        settings.Width = Unit.Percentage(80);

        settings.Items.AddGroupItem(m => Model.Header, g =>
        {
            g.ColCount = 1;
            g.GroupBoxDecoration = GroupBoxDecoration.None;
            //g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Center;
            g.VerticalAlign = FormLayoutVerticalAlign.Middle;

            g.Items.AddGroupItem(m => Model, g1 =>
            {
                g1.ColCount = 3;
                g1.GroupBoxDecoration = GroupBoxDecoration.None;
                g1.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
                g1.Caption = "";
                g1.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("RequestType") + "*";
                })
                .SetNestedContent(() =>
                {
                    Html.DevExpress().ComboBoxFor(i => i.Header.DocumentType, s =>
                    {
                        s.Width = Unit.Percentage(100);
                        s.Properties.ClientInstanceName = "cboDocType";
                        s.ShowModelErrors = true;
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                        s.Properties.ValidationSettings.SetFocusOnError = true;
                        s.Properties.ValidationSettings.ErrorText = "*";
                        s.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                        s.Properties.ValueType = typeof(string);
                        s.Properties.ValueField = "DocType";
                        s.Properties.TextField = "Description";
                        s.Properties.Columns.Add("DocType", Humica.EF.Models.SY.SYSettings.getLabel("RequestType"));
                        s.Properties.Columns.Add("Description", Humica.EF.Models.SY.SYSettings.getLabel("Description"));
                        s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                            ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "_SELECT");
                        s.Properties.ClientSideEvents.SelectedIndexChanged = "selectParam";
                    }).BindList(ViewData["REQUEST_TYPE"]).Render();
                });
                g1.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                        ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "RPNumber") + "*";
                })
                .SetNestedContent(() =>
                {
                    Html.DevExpress().TextBoxFor(i => i.Header.RPNumber, s =>
                    {
                        s.Width = Unit.Percentage(100);
                        s.ReadOnly = true;
                        s.ShowModelErrors = true;
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                        s.Properties.ValidationSettings.SetFocusOnError = true;
                        s.Properties.ValidationSettings.ErrorText = "*";
                        s.Properties.NullDisplayText = Humica.EF.Models.SY.SYConstant.NEW_RECORD;
                        s.Properties.NullText = Humica.EF.Models.SY.SYConstant.NEW_RECORD;
                    }).Render();
                });
                g1.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                        ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "Status");
                })
                .SetNestedContent(() =>
                {
                    Html.DevExpress().TextBoxFor(i => i.Header.Status, s =>
                    {
                        s.Width = Unit.Percentage(100);
                        s.ReadOnly = true;
                        s.ShowModelErrors = true;
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                        s.Properties.ValidationSettings.SetFocusOnError = true;
                        s.Properties.ValidationSettings.ErrorText = "*";
                    }).Render();
                });
                g1.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                        ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "Document Date");
                })
                    .SetNestedContent(() =>
                    {
                        Html.DevExpress().DateEditFor(i => i.Header.DocumentDate, s =>
                        {
                            s.Width = Unit.Percentage(100);
                            s.ShowModelErrors = true;
                            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                            s.Properties.ValidationSettings.SetFocusOnError = true;
                            s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                            s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                            s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                            s.Properties.ValidationSettings.ErrorText = "*";
                        }).Render();
                    });
                g1.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Branch") + "*";
                })
              .SetNestedContent(() =>
              {
                  Html.DevExpress().ComboBoxFor(i => i.Header.Branch, s =>
                  {
                      s.Width = Unit.Percentage(100);
                      s.Properties.ClientInstanceName = "cboLocation";
                      s.ShowModelErrors = true;
                      s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                      s.Properties.ValidationSettings.SetFocusOnError = true;
                      s.Properties.ValidationSettings.ErrorText = "*";
                      s.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                      s.Properties.ValueType = typeof(string);
                      s.Properties.ValueField = "Code";
                      s.Properties.TextField = "Description";
                      s.Properties.TextFormatString = "{0}:{1}";
                      s.Properties.Columns.Add("Code", Humica.EF.Models.SY.SYSettings.getLabel("Code"), 60);
                      s.Properties.Columns.Add("Description", Humica.EF.Models.SY.SYSettings.getLabel("Description"), 200);
                      s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                           ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "_SELECT");
                      s.Properties.ClientSideEvents.ValueChanged = "selectParam";
                  }).BindList(ViewData["STAFF_LOCATION"]).Render();
              });
                g1.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Total Request");
                })
               .SetNestedContent(() =>
               {
                   Html.DevExpress().TextBoxFor(i => i.Header.TotalAmountReq, s =>
                   {
                       s.Properties.ClientInstanceName = "txtTOTALReq";
                       s.ShowModelErrors = true;
                       s.ReadOnly = true;
                       s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                       s.Properties.ValidationSettings.SetFocusOnError = true;
                       s.Properties.ValidationSettings.ErrorText = "*";
                   }).Render();
               });
                g1.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                        ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "Requestor");
                })
                   .SetNestedContent(() =>
                   {
                       Html.DevExpress().ComboBoxFor(i => i.Header.Requestor, s =>
                       {
                           s.Width = Unit.Percentage(100);
                           s.ShowModelErrors = true;
                           s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                           s.Properties.ValidationSettings.SetFocusOnError = true;
                           s.Properties.ValidationSettings.ErrorText = "*";
                           s.Properties.TextField = "AllName";
                           s.Properties.TextFormatString = "{1}";
                           s.Properties.ValueField = "EmpCode";
                           s.Properties.Columns.Add("EmpCode", Humica.EF.Models.SY.SYSettings.getLabel("EmpCode"));
                           s.Properties.Columns.Add("AllName", Humica.EF.Models.SY.SYSettings.getLabel("AllName"));
                           s.Properties.Columns.Add("OthAllName", Humica.EF.Models.SY.SYSettings.getLabel("OthAllName"));
                           s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                       }).BindList(ViewData["STAFF_SELECT"]).Render();
                   });
                g1.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                        ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "BeneName");
                })
                    .SetNestedContent(() =>
                    {
                        Html.DevExpress().TextBoxFor(i => i.Header.BeneName, s =>
                        {
                            s.Width = Unit.Percentage(100);
                            s.ShowModelErrors = true;
                            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                            s.Properties.ValidationSettings.SetFocusOnError = true;
                            s.Properties.ValidationSettings.ErrorText = "*";
                        }).Render();
                    });

                g1.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Total Revised");
                })
              .SetNestedContent(() =>
              {
                  Html.DevExpress().TextBoxFor(i => i.Header.TotalAmountRev, s =>
                  {
                      s.Properties.ClientInstanceName = "txtTOTALRev";
                      s.ShowModelErrors = true;
                      s.ReadOnly = true;
                      s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                      s.Properties.ValidationSettings.SetFocusOnError = true;
                      s.Properties.ValidationSettings.ErrorText = "*";
                  }).Render();
              });
                g1.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                        ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "BeneAcc");
                })
                    .SetNestedContent(() =>
                    {
                        Html.DevExpress().TextBoxFor(i => i.Header.BeneAcc, s =>
                        {
                            s.Width = Unit.Percentage(100);

                            s.ShowModelErrors = true;
                            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                            s.Properties.ValidationSettings.SetFocusOnError = true;
                            s.Properties.ValidationSettings.ErrorText = "*";
                        }).Render();
                    });
                g1.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                        ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "BeneBank");
                })
                    .SetNestedContent(() =>
                    {
                        Html.DevExpress().TextBoxFor(i => i.Header.BeneBank, s =>
                        {

                            s.Width = Unit.Percentage(100);

                            s.ShowModelErrors = true;
                            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                            s.Properties.ValidationSettings.SetFocusOnError = true;
                            s.Properties.ValidationSettings.ErrorText = "*";
                        }).Render();
                    });
                g1.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                        ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "Currency");
                })
               .SetNestedContent(() =>
               {
                   Html.DevExpress().ComboBoxFor(i => i.Header.Currency, s =>
                   {
                       s.Width = Unit.Percentage(100);
                       s.Properties.ValueField = "CurrencyCode";
                       s.Properties.TextField = "Description";
                       s.Properties.TextFormatString = "{1}";
                       s.Properties.Columns.Add("CurrencyCode", Humica.EF.Models.SY.SYSettings.getLabel("Code"), 60);
                       s.Properties.Columns.Add("Description", Humica.EF.Models.SY.SYSettings.getLabel("Description"), 200);
                       s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                            ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "_SELECT");
                   }).BindList(ViewData["CURRENCY_SELECT"]).Render();
               });
                g1.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Delivery Date");
                })
                   .SetNestedContent(() =>
                   {
                       Html.DevExpress().DateEditFor(i => i.Header.DeliveryDate, s =>
                       {
                           s.Width = Unit.Percentage(100);
                           s.ShowModelErrors = true;
                           s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                           s.Properties.ValidationSettings.SetFocusOnError = true;
                           s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                           s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                           s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                           s.Properties.ValidationSettings.ErrorText = "*";
                       }).Render();
                   });
                g1.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Description");
                    m.ColumnSpan = 3;
                })
                  .SetNestedContent(() =>
                  {
                      Html.DevExpress().TextBoxFor(i => i.Header.Description, s =>
                      {
                          s.Width = Unit.Percentage(100);
                          s.ShowModelErrors = true;
                          s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                          s.Properties.ValidationSettings.SetFocusOnError = true;
                          s.Properties.ValidationSettings.ErrorText = "*";
                      }).Render();
                  });

            });
            g.Items.AddGroupItem(m => Model, g2 =>
            {
                g2.ColCount = 4;
                g2.GroupBoxDecoration = GroupBoxDecoration.None;
                g2.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
                g2.Caption = "";
                g2.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                        ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "Pay For");
                })
                    .SetNestedContent(() =>
                    {
                        Html.DevExpress().CheckBoxFor(i => i.Header.Advance, s =>
                        {

                            s.Width = Unit.Percentage(100);
                            s.Text = "Advance";
                            s.ShowModelErrors = true;
                            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                            s.Properties.ValidationSettings.SetFocusOnError = true;
                            s.Properties.ValidationSettings.ErrorText = "*";
                        }).Render();
                    });
                g2.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                        ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "");
                })
                    .SetNestedContent(() =>
                    {
                        Html.DevExpress().CheckBoxFor(i => i.Header.SettlementAdvance, s =>
                        {

                            s.Width = Unit.Percentage(100);
                            s.Text = "Settlement of Advance";
                            s.ShowModelErrors = true;
                            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                            s.Properties.ValidationSettings.SetFocusOnError = true;
                            s.Properties.ValidationSettings.ErrorText = "*";
                        }).Render();
                    });

                g2.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                        ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "");
                })
                  .SetNestedContent(() =>
                  {
                      Html.DevExpress().CheckBoxFor(i => i.Header.PaymentVendor, s =>
                      {

                          s.Width = Unit.Percentage(100);
                          s.Text = "Payment to Vendor";
                          s.ShowModelErrors = true;
                          s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                          s.Properties.ValidationSettings.SetFocusOnError = true;
                          s.Properties.ValidationSettings.ErrorText = "*";
                      }).Render();
                  });

                g2.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                        ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "");
                })
                  .SetNestedContent(() =>
                  {
                      Html.DevExpress().CheckBoxFor(i => i.Header.PayymenyStaff, s =>
                      {

                          s.Width = Unit.Percentage(100);
                          s.Text = "Payment to Staff";
                          s.ShowModelErrors = true;
                          s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                          s.Properties.ValidationSettings.SetFocusOnError = true;
                          s.Properties.ValidationSettings.ErrorText = "*";
                      }).Render();
                  });

            });
            g.Items.AddGroupItem(m => Model, g1 =>
            {
                g1.ColCount = 3;
                g1.GroupBoxDecoration = GroupBoxDecoration.None;
                g1.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
                g1.Caption = "";
                g1.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Advance Amount");
                })
                .SetNestedContent(() =>
                {
                    Html.DevExpress().SpinEditFor(i => i.Header.AdvanceAmount, s =>
                    {
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                        s.Properties.ValidationSettings.SetFocusOnError = true;
                        s.Properties.ValidationSettings.ErrorText = "*";
                        s.Properties.DisplayFormatString = "N2";
                        s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                    }).Render();
                });
                g1.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Due To Employee");
                })
                .SetNestedContent(() =>
                {
                    Html.DevExpress().SpinEditFor(i => i.Header.DueToEmployee, s =>
                    {
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                        s.Properties.ValidationSettings.SetFocusOnError = true;
                        s.Properties.ValidationSettings.ErrorText = "*";
                        s.Properties.DisplayFormatString = "N2";
                        s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                    }).Render();
                });
                g1.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Due To Company");
                })
                .SetNestedContent(() =>
                {
                    Html.DevExpress().SpinEditFor(i => i.Header.DueToCompany, s =>
                    {
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                        s.Properties.ValidationSettings.SetFocusOnError = true;
                        s.Properties.ValidationSettings.ErrorText = "*";
                        s.Properties.DisplayFormatString = "N2";
                        s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                    }).Render();
                });
                g1.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>
                        )
                        ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "Advanced Date");
                })
                    .SetNestedContent(() =>
                    {
                        Html.DevExpress().DateEditFor(i => i.Header.AdvanceDate, s =>
                        {
                            s.Width = Unit.Percentage(100);
                            s.ShowModelErrors = true;
                            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                            s.Properties.ValidationSettings.SetFocusOnError = true;
                            s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                            s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                            s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                            s.Properties.ValidationSettings.ErrorText = "*";
                        }).Render();
                    });
            });
        });

    }).GetHtml();
}

@Html.DevExpress().PageControl(
   settings =>
   {
       settings.Name = "pcScrollingWorkCalendar";
       settings.Width = Unit.Percentage(100);

       settings.EnableTabScrolling = true;
       settings.TabAlign = TabAlign.Justify;

       settings.Styles.Tab.CssClass = "scrolling_Tab";
       settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>
        )ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "DETAILS")).SetContent(() =>
        {
            @Html.RenderPartial("GridItem", Model);
        });
       settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                 ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "ApprovalDetail")).SetContent(() =>
                 {
                     Html.RenderPartial("GridApproval", Model.ListApproval);
                 });

   }).GetHtml()