

@Html.DevExpress().GridView(
    settings =>
    {
        settings.Name = "gridViewItem";
        settings.KeyFieldName = "ID";

        settings.EnableTheming = true;
        settings.EnableRowsCache = true;
        settings.Width = Unit.Percentage(100);
        settings.SettingsEditing.Mode = GridViewEditingMode.Inline;
        settings.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Cell;
        settings.SettingsEditing.NewItemRowPosition = GridViewNewItemRowPosition.Top;
        settings.CallbackRouteValues = new { Controller = "Menu", Action = "GridItems1" };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Menu", Action = "CreateMenu1" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Menu", Action = "EditMenu1" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Menu", Action = "DeleteMenu1" };

        settings.SettingsBehavior.AllowSort = false;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowDeleteButton = true;

        settings.CommandColumn.ShowNewButtonInHeader = true;
        settings.CommandColumn.ShowCancelButton = true;
        settings.CommandColumn.ShowEditButton = true;
        settings.SettingsBehavior.AllowFocusedRow = true;

        settings.SettingsBehavior.ConfirmDelete = true;
        settings.SettingsSearchPanel.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFooter = true;
        settings.SettingsContextMenu.Enabled = true;
        settings.SettingsContextMenu.RowMenuItemVisibility.DeleteRow = false;
        settings.SettingsContextMenu.RowMenuItemVisibility.EditRow = false;
        settings.SettingsContextMenu.RowMenuItemVisibility.NewRow = false;
        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsPopup.HeaderFilter.Height = 200;
        /*--------------------------------------------*/

        settings.Columns.Add(column =>
        {

            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Image");

            column.Width = 0;
            column.FieldName = "ImageUrl";
            column.EditorProperties().Image(i => i.ImageWidth = 80);

            //column.SetDataItemTemplateContent(container =>
            //{

            //    var attachment = Convert.ToString(DataBinder.Eval(container.DataItem, "ImageUrl"));
            //    if (!(attachment == null || attachment == ""))
            //    {
            //        Html.DevExpress().HyperLink(hyperlink =>
            //        {
            //            hyperlink.Name = "file_" + container.VisibleIndex;
            //            hyperlink.Properties.Text = Humica.EF.Models.SY.SYSettings.getLabel("View");
            //            hyperlink.Properties.Target = "_BLANK";
            //            hyperlink.NavigateUrl = attachment;
            //        }).Render();
            //    }
            //});

            column.SetEditItemTemplateContent(c =>
            {
                Html.DevExpress().UploadControl(ss =>
                {
                    ss.ShowProgressPanel = true;
                    ss.CallbackRouteValues = new { Controller = "Menu", Action = "UploadControlCallbackActionImage" };
                    ss.Name = "uc_image";
                    ss.UploadMode = UploadControlUploadMode.Auto;
                    ss.AutoStartUpload = true;
                    ss.Width = 80;
                    ss.DialogTriggerID = "externalDropZone";
                    ss.AdvancedModeSettings.EnableDragAndDrop = false;
                    ss.AdvancedModeSettings.EnableMultiSelect = false;
                    ss.ShowTextBox = false;
                    ss.ShowUploadButton = false;
                    ss.ShowAddRemoveButtons = false;
                    ss.ShowProgressPanel = true;
                    ss.ShowClearFileSelectionButton = true;
                    ss.AdvancedModeSettings.EnableFileList = true;
                    ss.AdvancedModeSettings.FileListPosition = UploadControlFileListPosition.Top;
                    ss.AdvancedModeSettings.ExternalDropZoneID = "externalDropZone";
                    ss.AdvancedModeSettings.DropZoneText = "";
                    ss.ValidationSettings.MaxFileSize = 4194304;
                    ss.BrowseButton.Image.IconID = IconID.ActionsNew16x16;
                    ss.ValidationSettings.AllowedFileExtensions = new string[] { ".jpg", ".jpeg", ".gif", ".png", ".pdf", ".svg" };
                    ss.ValidationSettings.ErrorStyle.CssClass = "validationMessage";
                    ss.BrowseButton.Text = Humica.EF.Models.SY.SYSettings.getLabel("");
                    ss.ClientSideEvents.FileUploadComplete = "completedUploadFileItem";
                }).Render();

                Html.DevExpress().HyperLink(
                s =>
                {
                    s.Name = "file_uploaded";
                    s.ToolTip = "File";
                    s.ClientVisible = false;
                    s.Properties.Target = "_BLANK";
                    s.Properties.Text = Humica.EF.Models.SY.SYSettings.getLabel("View");

                }).GetHtml();
            });
        });

        settings.Columns.Add(column =>
        {
            column.Width = 220;
            column.FieldName = "Text";
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            var textProperties = column.PropertiesEdit as TextEditProperties;
            textProperties.Width = Unit.Percentage(100);
        });


        settings.Columns.Add(column =>
        {
            column.Width = 220;
            column.FieldName = "NavigateUrl";
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            var textProperties = column.PropertiesEdit as TextEditProperties;
            textProperties.Width = Unit.Percentage(100);
        });


        settings.Columns.Add(column =>
        {
            column.Width = 220;
            column.FieldName = "Segment";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            var textProperties = column.PropertiesEdit as ComboBoxProperties;
            textProperties.DataSource = new Humica.EF.Models.SY.SYDataList("MENU_SEGMENT").ListData;
            textProperties.ValueField = "SelectValue";
            textProperties.TextField = "SelectText";
            textProperties.ValueType = typeof(string);
            textProperties.Width = Unit.Percentage(100);

        });
        settings.Columns.Add(column =>
        {

            column.FieldName = "SegmentUri";
            column.ColumnType = MVCxGridViewColumnType.TextBox;


        });

        settings.Columns.Add(column =>
        {

            column.FieldName = "Parent";
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            var textProperties = column.PropertiesEdit as ComboBoxProperties;
            textProperties.DataSource = ViewData["LIST_MENU"];
            textProperties.ValueField = "ID";
            textProperties.TextField = "Text";
            textProperties.ValueType = typeof(string);
            textProperties.Width = Unit.Percentage(100);
        });
        settings.Columns.Add(column =>
        {
            column.Width = 100;
            column.FieldName = "Part";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            var textProperties = column.PropertiesEdit as ComboBoxProperties;
            textProperties.DataSource = new Humica.EF.Models.SY.SYDataList("MENU_TYPE").ListData;
            textProperties.ValueField = "SelectValue";
            textProperties.TextField = "SelectText";
            textProperties.ValueType = typeof(string);
            textProperties.Width = Unit.Percentage(100);
        });
        settings.Columns.Add(column =>
        {
            column.Width = 100;
            column.FieldName = "InOrder";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;

        });

        settings.Columns.Add(column =>
        {
            column.Width = 250;
            column.FieldName = "Description";
            column.ColumnType = MVCxGridViewColumnType.TextBox;

        });

        settings.Columns.Add(column =>
        {

            column.FieldName = "IsActive";
            column.ColumnType = MVCxGridViewColumnType.CheckBox;

        });
    }).Bind(Model).GetHtml()




