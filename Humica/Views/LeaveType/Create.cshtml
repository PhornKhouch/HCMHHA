@model Humica.Logic.LM.LeaveTypeObject
<script type="text/javascript">

    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_btnSaveActionGrid').click(function () {
            $("form").submit();
        });

        txtFoperand.SetEnabled(false);
        txtOperator.SetEnabled(false);
        txtSoperand.SetEnabled(false);
        txtParent.SetEnabled(false);
        txtNumDay.SetEnabled(false);
        txtNumbackward.SetEnabled(false);
    });

    function OnClientValueChanged(s, e) {
        var checked = s.GetChecked();
        txtFoperand.SetEnabled(checked);
        txtOperator.SetEnabled(checked);
        txtSoperand.SetEnabled(checked);
    }
    function OnClientValueChangedReqDoc(s, e) {
        var checked = s.GetChecked();
        txtNumDay.SetEnabled(checked);
        if (checked == false) {
            txtNumDay.SetValue(0);
        }
    }
    function OnClientValueChangedP(s, e) {
        var checked = s.GetChecked();
        txtParent.SetEnabled(checked);
    }
    function OnClientValueChangedbackward(s, e) {
        var checked = s.GetChecked();
        txtNumbackward.SetEnabled(checked);
        if (checked == false) {
            txtNumbackward.SetValue(0);
        }
    }
</script>

@{

    Html.DevExpress().FormLayout(settings =>
    {
        settings.Name = "LeaveType";
        settings.AlignItemCaptionsInAllGroups = true;
        settings.Items.AddGroupItem(m => Model.Header, g =>
        {
            g.ColCount = 2;
            g.GroupBoxDecoration = GroupBoxDecoration.None;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Code");
            })
               .SetNestedContent(() =>
               {
                   Html.DevExpress().TextBoxFor(i => i.Header.Code, s =>
                   {
                       s.ShowModelErrors = true;
                       s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                       s.Properties.ValidationSettings.SetFocusOnError = true;
                       s.Properties.ValidationSettings.ErrorText = "*";
                   }).Render();
               });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Description");

            })
               .SetNestedContent(() =>
               {
                   Html.DevExpress().TextBoxFor(i => i.Header.Description, s =>
                   {
                       s.Properties.ClientInstanceName = "txtDescription";
                       s.ShowModelErrors = true;
                       s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                       s.Properties.ValidationSettings.SetFocusOnError = true;
                       s.Properties.ValidationSettings.ErrorText = "*";
                   }).Render();
               });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Second Description");

            })
               .SetNestedContent(() =>
               {
                   Html.DevExpress().TextBoxFor(i => i.Header.OthDesc, s =>
                   {
                       s.ShowModelErrors = true;
                       s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                       s.Properties.ValidationSettings.SetFocusOnError = true;
                       s.Properties.ValidationSettings.ErrorText = "*";
                   }).Render();
               });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Remark");
            })
              .SetNestedContent(() =>
              {
                  Html.DevExpress().TextBoxFor(i => i.Header.Remark, s =>
                  {
                      s.ShowModelErrors = true;
                      s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                      s.Properties.ValidationSettings.SetFocusOnError = true;
                      s.Properties.ValidationSettings.ErrorText = "*";
                  }).Render();
              });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Exclude Rest");
            })
              .SetNestedContent(() =>
              {
                  Html.DevExpress().CheckBoxFor(i => i.Header.InRest, s =>
                  {
                      s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                      s.Properties.ValidationSettings.SetFocusOnError = true;
                      s.Properties.ValidationSettings.ErrorText = "*";
                  }).Render();
              });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Allow Probation");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().CheckBoxFor(i => i.Header.Probation, s =>
                 {
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                 }).Render();
             });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Exclude Pub Holiday");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().CheckBoxFor(i => i.Header.IncPub, s =>
                {
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });

            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Allow Req.(Day)");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().SpinEditFor(i => i.Header.BeforeDay, s =>
                {
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.DisplayFormatString = "N";
                    s.Properties.NumberType = SpinEditNumberType.Integer;
                    s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                    s.Properties.MinValue = 0;
                    s.Properties.MaxValue = 9999999999999;
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Req. Document");
            })
           .SetNestedContent(() =>
           {
               Html.DevExpress().CheckBoxFor(i => i.Header.ReqDocument, s =>
               {
                   s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                   s.Properties.ValidationSettings.SetFocusOnError = true;
                   s.Properties.ValidationSettings.ErrorText = "*";
                   s.Properties.ClientSideEvents.CheckedChanged = "OnClientValueChangedReqDoc";
               }).Render();
           });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Num. Day");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().SpinEditFor(i => i.Header.NumDay, s =>
                {
                    s.Properties.ClientInstanceName = "txtNumDay";
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.DisplayFormatString = "N";
                    s.Properties.NumberType = SpinEditNumberType.Integer;
                    s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                    s.Properties.MinValue = 0;
                    s.Properties.MaxValue = 9999999999999;
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Allow Backward");
            })
           .SetNestedContent(() =>
           {
               Html.DevExpress().CheckBoxFor(i => i.Header.Allowbackward, s =>
               {
                   s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                   s.Properties.ValidationSettings.SetFocusOnError = true;
                   s.Properties.ValidationSettings.ErrorText = "*";
                   s.Properties.ClientSideEvents.CheckedChanged = "OnClientValueChangedbackward";
               }).Render();
           });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Num. Backward");
            })
           .SetNestedContent(() =>
           {
               Html.DevExpress().SpinEditFor(i => i.Header.Beforebackward, s =>
               {
                   s.Properties.ClientInstanceName = "txtNumbackward";
                   s.ShowModelErrors = true;
                   s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                   s.Properties.ValidationSettings.SetFocusOnError = true;
                   s.Properties.ValidationSettings.ErrorText = "*";
                   s.Properties.DisplayFormatString = "N";
                   s.Properties.NumberType = SpinEditNumberType.Integer;
                   s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                   s.Properties.MinValue = 0;
                   s.Properties.MaxValue = 9999999999999;
               }).Render();
           });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Allow Over EnTitle");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().CheckBoxFor(i => i.Header.IsOverEntitle, s =>
                {
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });

            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Allow Over Current");
            })
           .SetNestedContent(() =>
           {
               Html.DevExpress().CheckBoxFor(i => i.Header.IsCurrent, s =>
               {
                   s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                   s.Properties.ValidationSettings.SetFocusOnError = true;
                   s.Properties.ValidationSettings.ErrorText = "*";
               }).Render();
           });
           
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Gender");
            }).SetNestedContent(() =>
            {
                Html.DevExpress().ComboBoxFor(i => i.Header.Gender, s =>
                {
                   
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.ValueField = "SelectValue";
                    s.Properties.TextField = "SelectText";
                    s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                }).BindList(ViewData["GENDER_SELECT"]).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("CUT");
            })
                     .SetNestedContent(() =>
                     {
                         Html.DevExpress().CheckBoxFor(i => i.Header.CUT, s =>
                         {
                             s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                             s.Properties.ValidationSettings.SetFocusOnError = true;
                             s.Properties.ValidationSettings.ErrorText = "*";
                             s.Properties.ClientSideEvents.CheckedChanged = "OnClientValueChanged";
                         }).Render();
                     });
        });
        settings.Items.AddGroupItem(m => Model.Header, g =>
        {
            g.ColCount = 3;
            g.GroupBoxDecoration = GroupBoxDecoration.None;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Foperand");
            })
            .SetNestedContent(() =>
            {
                ViewContext.Writer.Write("<div class='row'>");
                ViewContext.Writer.Write("<div class='col-sm-3' style='margin-right:15px;width:65px;'>");
                Html.DevExpress().ComboBoxFor(i => i.Header.Foperand, s =>
                {
                    s.Properties.ClientInstanceName = "txtFoperand";
                    s.ShowModelErrors = true;
                    s.Width = Unit.Pixel(180);
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.TextFormatString = "{0}";
                    s.Properties.ValueField = "SelectValue";
                    s.Properties.TextField = "SelectText";
                    s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                }).BindList(ViewData["LEAVETYPE_SELECT"]).Render();
                ViewContext.Writer.Write("</div>");

                ViewContext.Writer.Write("<div class='col-sm-3' style='float:left;margin-left:100px;padding-right: 0px;height: 0px;width: 67px;'>");
                Html.DevExpress().ComboBoxFor(i => i.Header.Operator, s =>
                {
                    s.Properties.ClientInstanceName = "txtOperator";
                    s.ShowModelErrors = true;
                    s.Width = Unit.Pixel(120);
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.TextFormatString = "{0}";
                    s.Properties.ValueField = "SelectValue";
                    s.Properties.TextField = "SelectText";
                    s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                }).BindList(ViewData["Operator_SELECT"]).Render();
                ViewContext.Writer.Write("</div>");

                ViewContext.Writer.Write("<div class='col-sm-3' style='padding-left: 0px;padding-bottom: 1px;padding-top: 1.5;padding-top: 1px;' >");
                Html.DevExpress().TextBoxFor(i => i.Header.Soperand, s =>
                {
                    s.Properties.ClientInstanceName = "txtSoperand";
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Width = Unit.Pixel(40);
                }).Render();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("</div>");

            });
        });
        settings.Items.AddGroupItem(m => Model.Header, g =>
        {
            g.ColCount = 2;
            g.GroupBoxDecoration = GroupBoxDecoration.None;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("IsParent");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().CheckBoxFor(i => i.Header.IsParent, s =>
                {
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.ClientSideEvents.CheckedChanged = "OnClientValueChangedP";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Parent");

            })
            .SetNestedContent(() =>
            {

                ViewContext.Writer.Write("<div class='row'>");
                ViewContext.Writer.Write("<div class='col-sm-3'>");

                Html.DevExpress().ComboBoxFor(i => i.Header.Parent, s =>
                {
                    s.Properties.ClientInstanceName = "txtParent";
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                    s.Properties.ValueType = typeof(string);
                    s.Properties.ValueField = "Code";
                    s.Properties.TextField = "Description";
                    s.Properties.TextFormatString = "{0}:{1}";
                    s.Properties.Columns.Add("Code", Humica.EF.Models.SY.SYSettings.getLabel("Code"), 60);
                    s.Properties.Columns.Add("Description", Humica.EF.Models.SY.SYSettings.getLabel("Description"), 200);
                    s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                }).BindList(ViewData["Leave_SELECT"]).Render();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("</div>");
            });
        });
    }).GetHtml();

}
