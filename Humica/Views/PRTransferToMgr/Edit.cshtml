@model Humica.Logic.PR.PRTransferToMgrObject

<script type="text/javascript">

    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_btnSaveActionGrid').click(function () {
            $("form").submit();
        });
    });

    function SelectMgr(s, e) {
        selectedIDs = s.GetSelectedItem().GetColumnText(0);
        ShowData();
        ShowDataItem();
    }
    function ShowData() {
        $.ajax({
            type: 'post',
            url: _baseUrl + '/PR/PRM/PRTransferToMgr/ShowData',
            data: { 'EmpCode': selectedIDs,'Action': 'Create' },
            success: function (data) {
                if (data.MS == "OK") {

                    txtMgrName.SetValue(data.Name);
                    txtBranch.SetValue(data.Branch);
                    txtDEPT.SetValue(data.Dept);
                    txtPosition.SetValue(data.Post);
                    txtBankAcc.SetValue(data.BankAcc);
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);
            }
        });
    }
    function convert(str) {
        var date = new Date(str),
            mnth = ("0" + (date.getMonth() + 1)).slice(-2),
            day = ("0" + date.getDate()).slice(-2),
            Minutes = ("0" + date.getMinutes()).slice(-2);
        return [date.getFullYear(), mnth, day].join("-");
    }
    function ShowDataItem() {
        $.ajax({
            type: 'post',
            url: _baseUrl + '/PR/PRM/PRTransferToMgr/ShowDataItem',
            data: { 'MgrCode': txtMgrCode.GetValue(), 'Action': 'Create' },
            //'DocDate': convert(txtPaymentDate.GetDate()),
            success: function (data) {

                if (data.MS =="@Humica.EF.Models.SY.SYConstant.OK") {

                    GridItems.Refresh();
                }
                else {

                    //AlertMessage('Salary not yet generate');
                    GridItems.Refresh();
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
    function Selected(s, e) {
        txtEmp.SetValue(s.GetSelectedItem().GetColumnText(0));
        txtEmpName.SetValue(s.GetSelectedItem().GetColumnText(1));
        txtDept.SetValue(s.GetSelectedItem().GetColumnText(2));
        txtPost.SetValue(s.GetSelectedItem().GetColumnText(3));
    }
</script>

@Html.DevExpress().FormLayout(settings =>
{
    settings.Name = "Edit";
    settings.AlignItemCaptionsInAllGroups = true;

    settings.Items.AddGroupItem(m => Model.Header, g =>
    {
        g.ColCount = 2;
        g.GroupBoxDecoration = GroupBoxDecoration.None;
        g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;

        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Manager Code");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().ComboBoxFor(i => i.Header.MgrCode, s =>
            {
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ClientInstanceName = "txtMgrCode";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.ValueField = "EmpCode";
                s.Properties.TextField = "EmpCode";
                s.Properties.TextFormatString = "{0}";
                s.Properties.DropDownStyle = DropDownStyle.DropDownList;
                s.Properties.Columns.Add("EmpCode", Humica.EF.Models.SY.SYSettings.getLabel("Employee Code"));
                s.Properties.Columns.Add("AllName", Humica.EF.Models.SY.SYSettings.getLabel("Employee Name"));
                s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
            }).BindList(ViewData["EMPCODE_SELECT"]).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Manager Name");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.MgrName, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtMgrName";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Branch");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().ComboBoxFor(i => i.Header.Branch, s =>
            {
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ClientInstanceName = "txtBranch";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.ValueField = "Code";
                s.Properties.TextField = "Description";
            }).BindList(ViewData["BRANCHES_SELECT"]).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Department");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().ComboBoxFor(i => i.Header.DEPT, s =>
            {
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ClientInstanceName = "txtDEPT";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.ValueField = "Code";
                s.Properties.TextField = "Description";
            }).BindList(ViewData["DEPARTMENT_SELECT"]).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Position");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().ComboBoxFor(i => i.Header.POST, s =>
            {
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ClientInstanceName = "txtPosition";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.ValueField = "Code";
                s.Properties.TextField = "Description";
            }).BindList(ViewData["POSITION_SELECT"]).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Bank Account");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.BankAcc, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtBankAcc";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });

    });

}).GetHtml()

@Html.DevExpress().PageControl(settings =>
{
    settings.Name = "pcScrollingMaterialCreate";
    settings.Width = Unit.Percentage(100);
    settings.EnableTabScrolling = true;
    settings.TabAlign = TabAlign.Justify;
    settings.Styles.Tab.CssClass = "scrolling_Tab";
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Payment Staff")).SetContent(() =>
    {
        @Html.RenderPartial("GridItems", Model);
    });
}).GetHtml()

