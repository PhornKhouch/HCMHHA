@model Humica.Logic.PR.PREmpLoan

<script type="text/javascript">

    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_btnSaveActionGrid').click(function () {
            $("form").submit();
        });
    });
    //function SelectEmp(s, e) {
    //    selectedIDs = s.GetSelectedItem().GetColumnText(0);
    //    ShowDataEmp();
    //}

    function ShowDataEmp() {
        var total = 0;
        $.ajax({
            type: 'post',
            url: _baseUrl + '/PR/PRM/PREmpLoan/ShowData',
            data: { 'id': 'TOTAL', 'EmpCode': selectedIDs },
            success: function (data) {
                if (data.MS == "OK") {
                    var StartDate = data.StartDate;
                    nowDate = new Date(parseInt(StartDate.substr(6)));
                    txtAllName.SetValue(data.AllName);
                    txtEmpType.SetValue(data.EmpType);
                    txtDivision.SetValue(data.Division);
                    txtDepartment.SetValue(data.DEPT);
                    txtSection.SetValue(data.SECT);
                    txtLevel.SetValue(data.LevelCode);
                    txtPosition.SetValue(data.Position);
                    txtStartDate.SetValue(nowDate);
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }

    function EmpDbRowClick(s, e) {
        s.GetRowValues(s.GetFocusedRowIndex(), 'EmpCode;', OnGetRowValuesEmp);
        cboEmployee.HideDropDown();
    }

    function rowSelected(s, e) {
        EmployeeGridListSelector.GetRowValues(EmployeeGridListSelector.GetFocusedRowIndex(), 'EmpCode;', OnGetRowValuesEmp);
        cboEmployee.HideDropDown();
    }
    function OnGetRowValuesEmp(values) {
        cboEmployee.SetValue(values[0]);
        selectedIDs = values[0];
        ShowDataEmp();
    }
    function OnClientValueChanged(s, e) {
        GetData();
    }
    function convert(str) {
        var date = new Date(str),
          mnth = ("0" + (date.getMonth() + 1)).slice(-2),
          day = ("0" + date.getDate()).slice(-2),
          Minutes = ("0" + date.getMinutes()).slice(-2);
        return [date.getFullYear(), mnth, day].join("-");
    }
    function GetData() {
        $.ajax({
            type: 'post',
            url: _baseUrl + '/PR/PRM/PREmpLoan/GetData',
            data: { 'FromDate': convert(txtFromDate.GetDate()), 'Period': txtPeriod.GetValue(), 'LoanAmount': txtLoanAmount.GetValue(),'Amount': txtAmount.GetValue() },
            success: function (data) {
                if (data.MS == "OK") {
                    var EndDate = data.ToDate;
                    EDate = new Date(parseInt(EndDate.substr(6)));
                    txtToDate.SetValue(EDate);
                    GridItemDetails.Refresh();
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
</script>
<style>
</style>

@{
    Html.DevExpress().FormLayout(settings =>
    {
        settings.Name = "LeaveRequest";
        settings.AlignItemCaptionsInAllGroups = true;

        settings.Items.AddGroupItem(m => Model, g =>
        {
            g.ColCount = 3;
            g.GroupBoxDecoration = GroupBoxDecoration.None;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;

            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EmpCode") + "*";
            })
                 .SetNestedContent(() =>
                 {
                     Html.DevExpress().DropDownEditFor(i => Model.Filter.EmpCode, s =>
                     {
                         s.Properties.ClientInstanceName = "cboEmployee";
                         s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                         s.Properties.ValidationSettings.SetFocusOnError = true;
                         s.Properties.ValidationSettings.ErrorText = "*";
                         s.SetDropDownWindowTemplateContent(c =>
                         {
                             Html.RenderPartial(Humica.Models.SY.SYListFilter.ListFilterViewEmployee);

                             ViewContext.Writer.Write("<div style=\"padding: 6px; height: 24px;\">");

                             @Html.DevExpress().Button(
                               buttonSettings =>
                               {
                                   buttonSettings.Name = "buttonSelect";
                                   buttonSettings.Text = Humica.EF.Models.SY.SYSettings.getLabel("Ok");
                                   buttonSettings.Style.Add("float", "right");
                                   buttonSettings.Style.Add("margin", "0px 3px");
                                   buttonSettings.ClientSideEvents.Click = "rowSelected";
                                   buttonSettings.Height = 25;
                               }
                                   ).Render();
                             ViewContext.Writer.Write("</div>");

                         });
                         s.Properties.AnimationType = AnimationType.None;
                     }).Render();
                 });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("AllName");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => Model.Filter.AllName, s =>
                {
                    s.Properties.ClientInstanceName = "txtAllName";
                    s.ReadOnly = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EmpType");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().TextBoxFor(i => Model.Filter.EmpType, s =>
                 {
                     s.Properties.ClientInstanceName = "txtEmpType";
                     s.ReadOnly = true;
                     s.ShowModelErrors = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                 }).Render();
             });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Division");
            })
           .SetNestedContent(() =>
           {
               Html.DevExpress().TextBoxFor(i => Model.Filter.Division, s =>
               {
                   s.Properties.ClientInstanceName = "txtDivision";
                   s.ReadOnly = true;
                   s.ShowModelErrors = true;
                   s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                   s.Properties.ValidationSettings.SetFocusOnError = true;
                   s.Properties.ValidationSettings.ErrorText = "*";
               }).Render();
           });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Department");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => Model.Filter.Department, s =>
                {
                    s.Properties.ClientInstanceName = "txtDepartment";
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Section");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => Model.Filter.Section, s =>
                {
                    s.Properties.ClientInstanceName = "txtSection";
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("LevelCode");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => Model.Filter.Level, s =>
                {
                    s.Properties.ClientInstanceName = "txtLevel";
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Position");
            })
              .SetNestedContent(() =>
              {
                  Html.DevExpress().TextBoxFor(i => Model.Filter.Position, s =>
                  {
                      s.Properties.ClientInstanceName = "txtPosition";
                      s.ReadOnly = true;
                      s.ShowModelErrors = true;
                      s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                      s.Properties.ValidationSettings.SetFocusOnError = true;
                      s.Properties.ValidationSettings.ErrorText = "*";
                  }).Render();
              });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("StartDate");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().DateEditFor(i => Model.Filter.StartDate, s =>
                {
                    s.Properties.ClientInstanceName = "txtStartDate";
                    s.ReadOnly = true;
                    //  s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    // s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
        });

        settings.Items.AddGroupItem(m => Model.Header, g =>
        {
            g.ColCount = 3;
            g.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
            g.Caption = Humica.EF.Models.SY.SYSettings.getLabel("General");
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("FromDate");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().DateEditFor(i => i.Header.FromDate, s =>
                {
                    s.Properties.ClientInstanceName = "txtFromDate";
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.AllowNull = false;
                    s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.ClientSideEvents.ValueChanged = "OnClientValueChanged";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Period");
            })
                     .SetNestedContent(() =>
                     {
                         Html.DevExpress().SpinEditFor(i => i.Header.Period, s =>
                         {
                             s.Properties.ClientInstanceName = "txtPeriod";
                             s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                             s.Properties.ValidationSettings.SetFocusOnError = true;
                             s.Properties.ValidationSettings.ErrorText = "*";
                             s.Properties.DisplayFormatString = "N0";
                             s.Properties.MinValue = 0;
                             s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                             s.Properties.ClientSideEvents.ValueChanged = "OnClientValueChanged";
                         }).Render();
                     });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("ToDate");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().DateEditFor(i => i.Header.ToDate, s =>
                {
                    s.ReadOnly = true;
                    s.Properties.ClientInstanceName = "txtToDate";
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.AllowNull = false;
                    s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("LoanAmount");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().SpinEditFor(i => i.Header.LoanAmount, s =>
                {
                    s.Properties.ClientInstanceName = "txtLoanAmount";
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.DisplayFormatString = "N2";
                    s.Properties.MinValue = 0;
                    s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                    s.Properties.ClientSideEvents.ValueChanged = "OnClientValueChanged";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Amount");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().SpinEditFor(i => i.Header.Amount, s =>
                 {
                     s.Properties.ClientInstanceName = "txtAmount";
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                     s.Properties.DisplayFormatString = "N2";
                     s.Properties.MinValue = 0;
                     s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                     s.Properties.ClientSideEvents.ValueChanged = "OnClientValueChanged";
                 }).Render();
             });
            //    g.Items.Add(m =>
            //    {
            //        m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Reason");
            //        m.ColSpan = 2;
            //    })
            //.SetNestedContent(() =>
            //{
            //    Html.DevExpress().TextBoxFor(i => i.Header.Reason, s =>
            //    {
            //        s.Width = Unit.Percentage(100);
            //        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
            //        s.Properties.ValidationSettings.SetFocusOnError = true;
            //        s.Properties.ValidationSettings.ErrorText = "*";
            //    }).Render();
            //});
        });
    }).GetHtml();
    @Html.Partial("GridItemDetails", Model.ListHeaderD)
}
