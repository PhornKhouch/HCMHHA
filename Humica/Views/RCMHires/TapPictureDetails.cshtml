@model Humica.Logic.RCM.RCMRefChkPersonObject
@Html.DevExpress().FormLayout(gg =>
{

    var isReadOnly = false;
    gg.Name = "ProfileImage";
    gg.AlignItemCaptionsInAllGroups = true;
    gg.Items.AddGroupItem(m => m.Hire, g =>
    {
        g.Caption = "";
        g.GroupBoxDecoration = GroupBoxDecoration.None;
        g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Right;
        g.ColCount = 3;
        g.Items.AddGroupItem(m => m.Hire, g1 =>
        {
            g1.ColCount = 2;
            g1.GroupBoxDecoration = GroupBoxDecoration.None;
            g1.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Right;
            g1.Caption = "Place of Birth Information";
            g1.Items.Add(mm =>
            {
                mm.Caption = "";
            })
            .SetNestedContent(() =>
            {
                if (isReadOnly == true)
                {
                    ViewContext.Writer.Write("<div id='externalDropZone' class='dropZoneExternal'>");
                    ViewContext.Writer.Write("<img id='uploadedImage' src='" + Model.Hire.Images + "' alt=''   />");
                    ViewContext.Writer.Write("</div>");
                }
                if (isReadOnly == false)
                {
                    ViewContext.Writer.Write("<div id='externalDropZone' class='dropZoneExternal'><div id='dragZone'><span class='dragZoneText'>Drop Profile Image</span></div>");
                    ViewContext.Writer.Write("<img id='uploadedImage' src='" + Model.Hire.Images + "' alt='' style='width: 350px;' onload='onImageLoad()' />");
                    ViewContext.Writer.Write("<div id='dropZone' style='display: none'>");
                    ViewContext.Writer.Write("<span class='dropZoneText'>Drop Image</span>");
                    ViewContext.Writer.Write("</div></div>");
                    ViewContext.Writer.Write("</div></div>");
                    Html.DevExpress().UploadControl(ss =>
                    {
                        ss.ShowProgressPanel = true;
                        ss.CallbackRouteValues = new { Controller = "RCMHires", Action = "UploadControlCallbackActionImage" };
                        ss.Name = "uc_image";
                        ss.UploadMode = UploadControlUploadMode.Auto;
                        ss.AutoStartUpload = true;
                        ss.Width = 350;
                        ss.DialogTriggerID = "externalDropZone";
                        ss.AdvancedModeSettings.EnableDragAndDrop = true;
                        ss.AdvancedModeSettings.EnableFileList = false;
                        ss.AdvancedModeSettings.EnableMultiSelect = false;
                        ss.AdvancedModeSettings.ExternalDropZoneID = "externalDropZone";
                        ss.AdvancedModeSettings.DropZoneText = "";
                        ss.ValidationSettings.MaxFileSize = 9194304;
                        ss.ValidationSettings.AllowedFileExtensions = new string[] { ".jpg", ".jpeg", ".gif", ".png" };
                        ss.ValidationSettings.ErrorStyle.CssClass = "validationMessage";
                        ss.BrowseButton.Text = "Choose Image.";
                        ss.Styles.DropZone.CssClass = "uploadControlDropZone";
                        ss.Styles.ProgressBar.CssClass = "uploadControlProgressBar";
                        ss.ClientSideEvents.DropZoneEnter = "function(s, e) { if(e.dropZone.id == 'externalDropZone') setElementVisible('dropZone', true); }";
                        ss.ClientSideEvents.DropZoneLeave = "function(s, e) { if(e.dropZone.id == 'externalDropZone') setElementVisible('dropZone', false); }";
                        ss.ClientSideEvents.FileUploadComplete = "onUploadControlFileUploadCompleteProfile";
                    }).Render();
                    Html.DevExpress().TextBoxFor(i => i.Hire.Images, s =>
                    {
                        s.Properties.ClientInstanceName = "txtImage";
                        s.Properties.EnableClientSideAPI = true;
                        s.ClientVisible = true;
                        s.ReadOnly = true;
                        s.Width = 200;
                    }).Render();

                }
            });
        });

    });

}).GetHtml()