@model Humica.Logic.LM.ClaimLeaveObject

<script type="text/javascript">

    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_btnSaveActionGrid').click(function () {
            $("form").submit();
        });
    });
    function SelectEmp(s, e) {
        selectedIDs = s.GetSelectedItem().GetColumnText(0);
        ShowDataEmp();
    }
    function ShowData() {
        var total = 0;
        $.ajax({
            type: 'post',
            url: _baseUrl + '/SelfService/MyTeam/ESSTEMCompenLeave/ShowData',
            data: {
                'id': txtLeave.GetValue(), 'FromDate': convert(txtFromDate.GetDate()), 'ToDate': convert(txtToDate.GetDate()),
                'EmpCode': cboEmployee.GetValue(), 'Units': txtUnits.GetValue(), 'Action': 'Create'
            },
            success: function (data) {
                if (data.MS == "OK") {
                    txtNoDay.SetValue(data.NoDay);
                    txtNoPH.SetValue(data.NoPH);
                    txtNoRest.SetValue(data.NoRest);
                    txtBalance.SetValue(data.Balance);
                    GridItemDetails.Refresh();
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }


    function ShowDataEmp() {
        var total = 0;
        $.ajax({
            type: 'post',
            url: _baseUrl + '/SelfService/MyTeam/MyTeamLeaveRequest/ShowDataEmp',
            data: { 'id': 'TOTAL', 'EmpCode': selectedIDs },
            success: function (data) {
                if (data.MS == "OK") {
                    var StartDate = data.StartDate;
                    nowDate = new Date(parseInt(StartDate.substr(6)));
                    txtAllName.SetValue(data.AllName);
                    txtEmpType.SetValue(data.EmpType);
                    txtDivision.SetValue(data.Division);
                    txtDepartment.SetValue(data.DEPT);
                    txtSection.SetValue(data.SECT);
                    txtLevel.SetValue(data.LevelCode);
                    txtPosition.SetValue(data.Position);
                    txtStartDate.SetValue(nowDate);
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);
            }
        });
    }
</script>

@Html.DevExpress().FormLayout(settings =>
{
    settings.Name = "MaterialCreate";
    settings.AlignItemCaptionsInAllGroups = true;
    settings.Items.AddGroupItem(m => Model.Header, g =>
    {
        g.ColCount = 3;
        g.GroupBoxDecoration = GroupBoxDecoration.None;
        g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;

        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EmpCode");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().ComboBoxFor(i => Model.HeaderStaff.EmpCode, s =>
            {
                s.Properties.ClientInstanceName = "cboEmployee";
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.TextField = "AllName";
                s.Properties.TextFormatString = "{0}";
                s.Properties.ValueField = "EmpCode";
                s.Properties.Columns.Add("EmpCode", Humica.EF.Models.SY.SYSettings.getLabel("EmpCode"));
                s.Properties.Columns.Add("AllName", Humica.EF.Models.SY.SYSettings.getLabel("AllName"));
                s.Properties.Columns.Add("OthAllName", Humica.EF.Models.SY.SYSettings.getLabel("OthAllName"));
                s.Properties.ClientSideEvents.SelectedIndexChanged = "SelectEmp";
                s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
            }).BindList(ViewData["STAFF_SELECT"]).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("AllName");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderStaff.AllName, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtAllName";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Employee Type");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderStaff.EmployeeType, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtEmpType";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Division");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Division, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtDivision";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Department");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Department, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtDepartment";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Section");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Section, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtSection";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Level");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Level, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtLevel";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Position");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Position, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtPosition";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("StartDate");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().DateEditFor(i => i.HeaderStaff.StartDate, s =>
            {
                s.Properties.ClientInstanceName = "txtStartDate";
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
    });
}).GetHtml()

@Html.DevExpress().PageControl(settings =>
{
    settings.Name = "pcScrollingMaterial1";
    settings.Width = Unit.Percentage(100);

    settings.EnableTabScrolling = true;
    settings.TabAlign = TabAlign.Justify;

    settings.Styles.Tab.CssClass = "scrolling_Tab";
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Claim Information")).SetContent(() =>
    {
        Html.DevExpress().FormLayout(s1 =>
        {
            s1.Name = "ClaimLeaveInfor";
            s1.AlignItemCaptionsInAllGroups = true;

            s1.Items.AddGroupItem(m => Model.Header, g =>
            {
                g.ColCount = 2;
                g.GroupBoxDecoration = GroupBoxDecoration.None;
                g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
                g.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Working Date");
                })
                .SetNestedContent(() =>
                {
                    Html.DevExpress().DateEditFor(i => i.Header.WorkingDate, s =>
                    {
                        s.ShowModelErrors = true;
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                        s.Properties.ValidationSettings.SetFocusOnError = true;
                        s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                        s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                        s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                        s.Properties.ValidationSettings.ErrorText = "*";
                    }).Render();
                });
                g.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Working Type *");
                })
                .SetNestedContent(() =>
                {
                    Html.DevExpress().ComboBoxFor(i => i.Header.WorkingType, s =>
                    {
                        s.ShowModelErrors = true;
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                        s.Properties.ValidationSettings.SetFocusOnError = true;
                        s.Properties.ValidationSettings.ErrorText = "*";
                        s.Properties.TextField = "SelectText";
                        s.Properties.ValueField = "SelectValue";
                        s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                    }).BindList(ViewData["WORKINGTYPE_SELECT"]).Render();
                });
                g.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Claim to Leave Type *");
                })
                .SetNestedContent(() =>
                {
                    Html.DevExpress().ComboBoxFor(i => i.Header.ClaimLeave, s =>
                    {
                        s.ShowModelErrors = true;
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                        s.Properties.ValidationSettings.SetFocusOnError = true;
                        s.Properties.ValidationSettings.ErrorText = "*";
                        s.Properties.TextFormatString = "{1}";
                        s.Properties.TextField = "Description";
                        s.Properties.ValueField = "Code";
                        s.Properties.DropDownStyle = DropDownStyle.DropDownList;
                        s.Properties.Columns.Add("Code", Humica.EF.Models.SY.SYSettings.getLabel("Code"));
                        s.Properties.Columns.Add("Description", Humica.EF.Models.SY.SYSettings.getLabel("Description"));
                        s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                    }).BindList(ViewData["LEAVETYPE_SELECT"]).Render();
                });
                g.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Working Hour");
                })
                    .SetNestedContent(() =>
                    {
                        Html.DevExpress().SpinEditFor(i => i.Header.WorkingHour, s =>
                        {
                            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                            s.Properties.ValidationSettings.SetFocusOnError = true;
                            s.Properties.ValidationSettings.ErrorText = "*";
                            s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                        }).Render();
                    });
                g.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Remark");
                    m.ColumnSpan = 2;
                })
                .SetNestedContent(() =>
                {
                    Html.DevExpress().TextBoxFor(i => i.Header.Remark, s =>
                    {
                        s.Width = Unit.Percentage(100);
                        s.ShowModelErrors = true;
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                        s.Properties.ValidationSettings.SetFocusOnError = true;
                        s.Properties.ValidationSettings.ErrorText = "*";
                    }).Render();
                });
            });
        }).GetHtml();
    });
}).GetHtml()
