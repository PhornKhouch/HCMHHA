@model Humica.Employee.IClsEmployee
<script type="text/javascript">
    var _L = "@Model.Header.JobGrade";
    var _d = "@Model.Header.District";
    var _c = "@Model.Header.Commune";
    var _v = "@Model.Header.Village";
    var _Div = "@Model.Header.Division";
    var _GDept = "@Model.Header.GroupDept";
    var _Dept = "@Model.Header.DEPT";
    var _JC = "@Model.Header.JobCode";
    var _SECT = "@Model.Header.SECT";
    var _LC = "@Model.Header.LevelCode";
    var _JG = "@Model.Header.JobGrade";
    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_btnSaveActionGrid').click(function () {
            $("form").submit();
        });
        txtSalary.SetEnabled(false);
    });

    function ValueChange(s, e) {
        var FirstName = txtFirstName.GetValue();
        var LastName = txtLastName.GetValue();
        if (txtFirstName.GetValue() == null) FirstName = "";
        if (txtLastName.GetValue() == null) LastName = "";
        if ("@Model.Fist_Last" == "True")
            txtAllName.SetValue(FirstName + " " + LastName);
        else txtAllName.SetValue(LastName + " " + FirstName);
    }
    function OthValueChange(s, e) {
        var OthFirstName = txtOthFirstName.GetValue();
        var OthLastName = txtOthLastName.GetValue();
        if (txtOthFirstName.GetValue() == null) OthFirstName = "";
        if (txtOthLastName.GetValue() == null) OthLastName = "";
        if ("@Model.Fist_Last_KH" == "True")
            txtOthAllName.SetValue(OthFirstName + " " + OthLastName);
        else txtOthAllName.SetValue(OthLastName + " " + OthFirstName);
    }
    function OnClientValueChanged(s, e) {
        ShowData();
    }
    function ShowData() {
        $.ajax({
            type: 'post',
            url: _baseUrl + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + '/ShowData',
            data: { 'StartDate': convert(txtStartDate.GetDate()), 'ProType': txtProbationType.GetValue() },
            success: function (data) {
                if (data.MS == "@Humica.EF.SYSConstant.OK") {
                    var Probat = data.Probation;
                    ProDate = new Date(parseInt(Probat.substr(6)));
                    var Leave = data.LeaveCof;
                    LeaveDate = new Date(parseInt(Leave.substr(6)));
                    txtProbation.SetValue(ProDate);
                    txtLeaveConf.SetValue(LeaveDate);
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        })
    }
    function convert(str) {
        var date = new Date(str),
            mnth = ("0" + (date.getMonth() + 1)).slice(-2),
            day = ("0" + date.getDate()).slice(-2),
            Minutes = ("0" + date.getMinutes()).slice(-2);
        return [date.getFullYear(), mnth, day].join("-");
    }
    function select_Level(s, e) {
        $.ajax({
            type: 'post',
            url: _baseUrl + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + '/FilterLevel',
            data: { 'Level': s.GetValue() },
            success: function (data) {
                txtSalary.SetEnabled(data.IsSalary);
                if (data.IsSalary == true) {
                    txtSalary.SetValue(0);
                }
                else {
                    txtSalary.SetValue("#####");
                }
            }
        });
    }

    function ShowFilePopup(filePath, fileName, TranNo, isEdit2) {
        var popupName;
        var lblName;
        if (isEdit2 == "IsFamily") {
            popupName = 'FilePopupEditFamily';
            lblName = 'lblFileNameEdit';
        }
        else if (isEdit2 == "IsIdentity") {
            popupName = 'FilePopupEditIdentity';
            lblName = 'lblFileNameEditIdentity';
        }
        else if (isEdit2 == "IsEdu") {
            popupName = 'FilePopupEditEdu';
            lblName = 'lblFileNameEditEdu';
        }
        else if (isEdit2 == "IsContract") {
            popupName = 'FilePopupEditContract';
            lblName = 'lblFileNameEditContract';
        }
        else if (isEdit2 == "IsDisciplinary") {
            popupName = 'FilePopupEditDisciplinary';
            lblName = 'lblFileNameEditDisciplinary';
        }
        else if (isEdit2 == "IsCertificate") {
            popupName = 'FilePopupEditCertificate';
            lblName = 'lblFileNameEditCertificate';
        }

        var popup = ASPxClientPopupControl.Cast(popupName);
        if (popup) {
            popup.filePath = filePath;
            popup.fileName = fileName;
            popup.TranNo = TranNo;

            // Update the label text
            var lblFileName = ASPxClientLabel.Cast(lblName);
            if (lblFileName) {
                lblFileName.SetText(fileName);
            } else {
                console.error('Label ' + lblName + ' not found.');
            }
            popup.Show();
        } else {
            console.error('Popup control ' + popupName + ' not found.');
        }
    }
    function DeleteFileEdu(TranNo, filePath, isEdit2) {
        if (!TranNo || !filePath || !isEdit2) {
            console.error("Invalid parameters:", { TranNo, filePath, isEdit2 });
            alert("Invalid input parameters for file deletion.");
            return;
        }
        let url, containerIdPrefix;
        if (isEdit2 === "IsFamily")
        {
             url = '@Url.Action("DeleteFileFamily", "HRStaffProfile")';
             containerIdPrefix = "txtFileFamilyContainer_";
        }
        else if (isEdit2 === "IsIdentity")
        {
             url = '@Url.Action("DeleteFileIdentity", "HRStaffProfile")';
             containerIdPrefix = "txtFileIdentityContainer_";
        }
        else if (isEdit2 === "IsEdu")
        {
             url = '@Url.Action("DeleteFileEdu", "HRStaffProfile")';
             containerIdPrefix = "txtFileEduContainer_";
        }
        else if (isEdit2 === "IsContract")
        {
            url = '@Url.Action("DeleteFileContract", "HRStaffProfile")';
            containerIdPrefix = "txtFileContractContainer_";
        }
        else if (isEdit2 === "IsDisciplinary")
        {
            url = '@Url.Action("DeleteFileDisciplinary", "HRStaffProfile")';
            containerIdPrefix = "txtFileDisciplinaryContainer_";
        }
        else if (isEdit2 === "IsCertificate")
        {
            url = '@Url.Action("DeleteFileCertificate", "HRStaffProfile")';
            containerIdPrefix = "txtFileCertificateContainer_";
        }
        else
        {
            console.error("Invalid isEdit2 value:", isEdit2);
            alert("Invalid request type: " + isEdit2);
            return;
        }
        const requestData = { TranNo, filePath };
        $.ajax({
            url: url,
            type: "POST",
            data: requestData,
            success: function (result) {
                if (result.success) {
                    if (typeof result.updatedAttachFile === "string") {
                        const filePaths = result.updatedAttachFile.split(";");
                        const uniqueFileNames = [...new Set(
                            filePaths.filter(path => path.trim() !== "").map(path => path.split("/").pop())
                        )];
                        const containerId = containerIdPrefix + TranNo;
                        const container = document.getElementById(containerId);
                        if (container) {
                            container.innerHTML = "";
                            if (uniqueFileNames.length > 0) {
                                uniqueFileNames.forEach(name => {
                                    const span = document.createElement("span");
                                    span.textContent = name;
                                    span.appendChild(document.createElement("br"));
                                    container.appendChild(span);
                                });
                            } else {
                                container.textContent = "No files attached.";
                            }
                        } else {
                            alert(`Failed to update file list: Container ${containerId} not found.`);
                        }
                    } else {
                        alert("Invalid server response: updatedAttachFile is not a string.");
                    }
                } else {
                    alert("Failed to delete the file: " + (result.message || "Unknown error"));
                }
            },
            error: function (xhr, status, error) {
                alert("An error occurred while deleting the file: " + error);
            }
        });
    }
</script>

<script type="text/javascript" src="~/Content/Staff3.js"></script>
<link rel="stylesheet" href="~/Content/Staff.css">

@Html.DevExpress().FormLayout(settings =>
{
    settings.Name = "MaterialCreate";
    settings.AlignItemCaptionsInAllGroups = true;

    settings.Items.AddGroupItem(m => Model.Header, g =>
    {
        g.ColCount = 3;
        g.GroupBoxDecoration = GroupBoxDecoration.None;
        g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;

        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EmpCode");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.EmpCode, s =>
            {
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("CareerCode");

        })
            .SetNestedContent(() =>
            {
                Html.DevExpress().ComboBoxFor(i => i.Header.CareerDesc, s =>
                {
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.TextFormatString = "{0}";
                    s.Properties.ValueField = "Code";
                    s.Properties.TextField = "Description";
                    s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                }).BindList(ViewData["CareerHistories_SELECT"]).Render();
            });
        g.Items.AddEmptyItem();
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("FirstName");
            m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.FirstName, s =>
            {
                s.Properties.ClientInstanceName = "txtFirstName";
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.ClientSideEvents.KeyUp = "ValueChange";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("LastName");
            m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.LastName, s =>
            {
                s.Properties.ClientInstanceName = "txtLastName";
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.ClientSideEvents.KeyUp = "ValueChange";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("FullName");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.AllName, s =>
            {
                s.Properties.ClientInstanceName = "txtAllName";
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("OthFirstName");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.OthFirstName, s =>
            {
                s.Properties.ClientInstanceName = "txtOthFirstName";
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.ClientSideEvents.KeyUp = "OthValueChange";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("OthLastName");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.OthLastName, s =>
            {
                s.Properties.ClientInstanceName = "txtOthLastName";
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.ClientSideEvents.KeyUp = "OthValueChange";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("OthFullName");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.OthAllName, s =>
            {
                s.Properties.ClientInstanceName = "txtOthAllName";
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
    });

}).GetHtml()

@Html.DevExpress().PageControl(settings =>
{
    settings.Name = "pcScrollingMaterial1";
    settings.Width = Unit.Percentage(100);

    settings.EnableTabScrolling = true;
    settings.TabAlign = TabAlign.Justify;

    settings.Styles.Tab.CssClass = "scrolling_Tab";

    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Personal Information")).SetContent(() =>
    {
        Html.RenderPartial("TapPersonalInfor", Model);
    });
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Job Information")).SetContent(() =>
    {
        Html.RenderPartial("TapJob", Model);
    });
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Manager & Approver")).SetContent(() =>
    {
        Html.RenderPartial("TapManApprover", Model);
    });
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Bank Information")).SetContent(() =>
    {
        Html.RenderPartial("TapBankInfo", Model);
    });
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Personal Documents")).SetContent(() =>
    {
        Html.RenderPartial("_Identity", Model.ListEmpIdentity);
    });
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Family")).SetContent(() =>
    {
        Html.RenderPartial("GridFamily", Model.ListEmpFamily);
    });
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Education")).SetContent(() =>
    {
        Html.RenderPartial("GridEducation", Model.ListEducation);
    });
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Contract")).SetContent(() =>
    {
        Html.RenderPartial("GridContract", Model.ListContract);
    });
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Probation Extension")).SetContent(() =>
    {
        Html.RenderPartial("GridProbationDetail", Model.ListDelayProbation);
    });
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Disciplinary")).SetContent(() =>
    {
        Html.RenderPartial("GridItemDiscip", Model.ListEmpDisciplinary);
    });
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Certified Letter")).SetContent(() =>
    {
        Html.RenderPartial("GridItemCertificate", Model.ListEmpCertificate);
    });
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Medical Check")).SetContent(() =>
    {
        Html.RenderPartial("GridItemMedical", Model.ListEmpMedical);
    });
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Job Description")).SetContent(() =>
    {
        Html.RenderPartial("GridJobDescription", Model.ListEmpJobDescription);
    });
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Employee Address")).SetContent(() =>
    {
        Html.RenderPartial("TapContactAddress", Model);
    });
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>
    )ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "Photo & Signature")).SetContent(() =>
    {
        @Html.RenderPartial("TapPicture", Model);
    });
}).GetHtml()