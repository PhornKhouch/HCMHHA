@{
    var grid = Html.DevExpress().GridView(settings =>
    {

        settings.Name = "GridItemDiscip";
        settings.KeyFieldName = "TranNo";
        settings.Width = Unit.Percentage(100);
        settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;

        settings.CallbackRouteValues = new { Controller = "HRStaffProfile", Action = "GridItemDiscip" };

        settings.CommandColumn.FixedStyle = GridViewColumnFixedStyle.Left;
        settings.SettingsBehavior.AllowFocusedRow = true;

        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Disciplinay Type");
            column.Width = 250;
            column.FieldName = "DiscType";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            var textProperties = column.PropertiesEdit as ComboBoxProperties;
            textProperties.ValidationSettings.Display = Display.None;
            textProperties.DataSource = ViewData["DISCIPLINAY_LIST"];
            textProperties.TextFormatString = "{1}";
            textProperties.ValueField = "Code";
            textProperties.Columns.Add("Code", Humica.EF.Models.SY.SYSettings.getLabel("Code"));
            textProperties.Columns.Add("Description", Humica.EF.Models.SY.SYSettings.getLabel("Description"), 200);
            textProperties.ValueType = typeof(string);
        });

        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Date");
            column.Width = 150;
            column.FieldName = "TranDate";
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            var textProperties = column.PropertiesEdit as DateEditProperties;
            textProperties.ValidationSettings.Display = Display.None;
            column.PropertiesEdit.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
            (column.PropertiesEdit as DateEditProperties).DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
            (column.PropertiesEdit as DateEditProperties).EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
            (column.PropertiesEdit as DateEditProperties).DisplayFormatInEditMode = true;
        });
        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Disciplinary Action");
            column.Width = 150;
            column.FieldName = "DiscAction";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            var textProperties = column.PropertiesEdit as ComboBoxProperties;
            textProperties.ValidationSettings.Display = Display.None;
            textProperties.DataSource = ViewData["DISCIPLINACTION_SELECT"];
            textProperties.TextFormatString = "{1}";
            textProperties.ValueField = "Code";
            textProperties.Columns.Add("Code", Humica.EF.Models.SY.SYSettings.getLabel("Code"));
            textProperties.Columns.Add("Description", Humica.EF.Models.SY.SYSettings.getLabel("Description"), 200);
            textProperties.ValueType = typeof(string);
        });
        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Remark");
            column.Width = 200;
            column.FieldName = "Remark";
            var textProperties = column.PropertiesEdit as TextBoxProperties;
            textProperties.ValidationSettings.Display = Display.None;
        });
        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Plan For Improvement");
            column.Width = 200;
            column.FieldName = "Reference";
            var textProperties = column.PropertiesEdit as TextBoxProperties;
            textProperties.ValidationSettings.Display = Display.None;
        });
        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Consequences of Further Infractions");
            column.Width = 250;
            column.FieldName = "Consequence";
            var textProperties = column.PropertiesEdit as TextBoxProperties;
            textProperties.ValidationSettings.Display = Display.None;
        });
         settings.Columns.Add(column =>
 {
     column.Width = 400;
     column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Attach File");
     column.FieldName = "AttachPath";
     column.SetDataItemTemplateContent(container =>
     {
         var attachment = Convert.ToString(DataBinder.Eval(container.DataItem, "AttachPath"));
         if (!string.IsNullOrEmpty(attachment))
         {
             string[] doc = attachment.Split(';');
             int i = 1;
             foreach (var r1 in doc)
             {
                 if (!string.IsNullOrEmpty(r1))
                 {
                     Html.DevExpress().HyperLink(hyperlink =>
                     {
                         hyperlink.Properties.Text = System.IO.Path.GetFileName(r1);
                         hyperlink.Properties.Target = "_BLANK";
                         hyperlink.NavigateUrl = r1;
                     }).Render();
                     ViewContext.Writer.Write("<br/>");
                 }
                 i++;
             }
         }
     });

     column.SetEditItemTemplateContent(c =>
     {
         Html.DevExpress().UploadControl(ss =>
         {
             ss.ShowProgressPanel = true;
             ss.CallbackRouteValues = new { Controller = "HRStaffProfile", Action = "UploadControlCallbackActionDisciplinary" };
             ss.Name = "FileUploadDisciplinary";
             ss.UploadMode = UploadControlUploadMode.Auto;
             ss.AutoStartUpload = true;
             ss.Width = 80;
             ss.DialogTriggerID = "externalDropZone";
             ss.AdvancedModeSettings.EnableDragAndDrop = false;
             ss.AdvancedModeSettings.EnableMultiSelect = false;
             ss.ShowTextBox = false;
             ss.ShowUploadButton = false;
             ss.ShowAddRemoveButtons = false;
             ss.ShowProgressPanel = true;
             ss.ShowClearFileSelectionButton = true;
             ss.AdvancedModeSettings.EnableFileList = true;
             ss.AdvancedModeSettings.FileListPosition = UploadControlFileListPosition.Top;
             ss.AdvancedModeSettings.ExternalDropZoneID = "externalDropZone";
             ss.AdvancedModeSettings.DropZoneText = "";
             ss.ValidationSettings.MaxFileSize = Convert.ToInt64(Humica.EF.Models.SY.SYSettings.getSetting(Humica.Models.SY.ClsConstant.MAX_FILE_SIZE_ATTACHMENT).SettinValue);
             ss.BrowseButton.Image.IconID = IconID.ActionsNew16x16;
             ss.ValidationSettings.AllowedFileExtensions = new string[] { ".jpg", ".jpeg", ".jpe", ".gif", ".bmp", ".png", ".doc", ".docx", ".pdf" };
             ss.ValidationSettings.ErrorStyle.CssClass = "validationMessage";
             ss.BrowseButton.Text = Humica.EF.Models.SY.SYSettings.getLabel("");
             ss.ClientSideEvents.FileUploadComplete = "completedUploadFileItem";
         }).Render();

         Html.DevExpress().HyperLink(
         s =>
         {
             s.Name = "file_uploaded";
             s.ToolTip = "File";
             s.ClientVisible = false;
             s.Properties.Target = "_BLANK";
             s.Properties.Text = Humica.EF.Models.SY.SYSettings.getLabel("View");

         }).GetHtml();

             });
         });
        settings.Settings.VerticalScrollBarMode = ScrollBarMode.Hidden;
        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
        settings.Settings.ShowHeaderFilterButton = true;

        settings.SettingsPager.PageSize = 15;
        settings.SettingsPager.EnableAdaptivity = true;
        settings.SettingsPager.PageSizeItemSettings.Visible = true;

        settings.SettingsExport.EnableClientSideExportAPI = true;
        settings.SettingsExport.ExportSelectedRowsOnly = true;

        settings.SettingsPopup.EditForm.SettingsAdaptivity.MaxWidth = 800;
        settings.SettingsPopup.EditForm.SettingsAdaptivity.Mode = PopupControlAdaptivityMode.Always;
        settings.SettingsPopup.EditForm.SettingsAdaptivity.VerticalAlign = PopupAdaptiveVerticalAlign.WindowCenter;
        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.CellEditorInitialize = (s, e) =>
        {
            ASPxEdit editor = (ASPxEdit)e.Editor;
            editor.ValidationSettings.Display = Display.Dynamic;
        };
    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()