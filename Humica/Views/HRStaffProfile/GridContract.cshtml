@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "GridContract";
        settings.KeyFieldName = "TranNo";
        settings.Width = Unit.Percentage(100);
        settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
        settings.CallbackRouteValues = new { Controller = "HRStaffProfile", Action = "GridContract" };
        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "HRStaffProfile", Action = "CreateContract" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "HRStaffProfile", Action = "EditContract" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "HRStaffProfile", Action = "DeleteContract" };

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.FixedStyle = GridViewColumnFixedStyle.Left;
        settings.CommandColumn.ShowNewButtonInHeader = true;
        settings.CommandColumn.ShowCancelButton = true;
        settings.CommandColumn.ShowEditButton = true;
        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Contract Type");
            column.Width = 200;
            column.FieldName = "ConType";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            var textProperties = column.PropertiesEdit as ComboBoxProperties;
            textProperties.ValidationSettings.Display = Display.None;
            textProperties.DataSource = ViewData["ContractType_LIST"];
            textProperties.TextFormatString = "{1}";
            textProperties.ValueField = "Code";
            textProperties.Columns.Add("Code", Humica.EF.Models.SY.SYSettings.getLabel("Code"));
            textProperties.Columns.Add("Description", Humica.EF.Models.SY.SYSettings.getLabel("Description"), 200);
            textProperties.ValueType = typeof(string);
        });
        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Contract Term");
            column.Width = 150;
            column.FieldName = "Conterm";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            var textProperties = column.PropertiesEdit as ComboBoxProperties;
            textProperties.ValidationSettings.Display = Display.None;
            textProperties.DataSource = ViewData["ContractConterm_LIST"];
            textProperties.ValueField = "SelectValue";
            textProperties.TextField = "SelectText";
            textProperties.TextFormatString = "{1}";
            textProperties.Columns.Add("SelectValue", Humica.EF.Models.SY.SYSettings.getLabel("Code"), 60);
            textProperties.Columns.Add("SelectText", Humica.EF.Models.SY.SYSettings.getLabel("Description"), 200);
            textProperties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
            textProperties.ValueType = typeof(string);
        });
        settings.Columns.Add(column =>
        {
            column.Width = 110;
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("From Date");
            column.FieldName = "FromDate";
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            var textProperties = column.PropertiesEdit as DateEditProperties;
            textProperties.ValidationSettings.Display = Display.None;
            column.PropertiesEdit.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
            (column.PropertiesEdit as DateEditProperties).DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
            (column.PropertiesEdit as DateEditProperties).EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
            (column.PropertiesEdit as DateEditProperties).DisplayFormatInEditMode = true;
        });
        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Remark");
            column.Width = 200;
            column.FieldName = "Description";
        });
        settings.Columns.Add(column =>
        {
            column.Width = 400;
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Attach File");
            column.FieldName = "ContractPath";
            column.SetDataItemTemplateContent(container =>
            {
                var attachment = Convert.ToString(DataBinder.Eval(container.DataItem, "ContractPath"));
                if (!string.IsNullOrEmpty(attachment))
                {
                    string[] doc = attachment.Split(';');
                    int i = 1;
                    foreach (var r1 in doc)
                    {
                        if (!string.IsNullOrEmpty(r1))
                        {
                            Html.DevExpress().HyperLink(hyperlink =>
                            {
                                //hyperlink.Name = "file_" + i + container.VisibleIndex;
                                hyperlink.Properties.Text = System.IO.Path.GetFileName(r1);
                                hyperlink.Properties.Target = "_BLANK";
                                hyperlink.NavigateUrl = r1;
                            }).Render();
                            ViewContext.Writer.Write("<br/>");
                        }
                        i++;
                    }
                }
            });

            column.SetEditItemTemplateContent(c =>
            {
                Html.DevExpress().UploadControl(ss =>
                {
                    ss.ShowProgressPanel = true;
                    ss.CallbackRouteValues = new { Controller = "HRStaffProfile", Action = "UploadControlCallbackActionContract" };
                    ss.Name = "FileUploadContract";
                    ss.UploadMode = UploadControlUploadMode.Auto;
                    ss.AutoStartUpload = true;
                    ss.Width = 80;
                    ss.DialogTriggerID = "externalDropZone";
                    ss.AdvancedModeSettings.EnableDragAndDrop = false;
                    ss.AdvancedModeSettings.EnableMultiSelect = false;
                    ss.ShowTextBox = false;
                    ss.ShowUploadButton = false;
                    ss.ShowAddRemoveButtons = false;
                    ss.ShowProgressPanel = true;
                    ss.ShowClearFileSelectionButton = true;
                    ss.AdvancedModeSettings.EnableFileList = true;
                    ss.AdvancedModeSettings.FileListPosition = UploadControlFileListPosition.Top;
                    ss.AdvancedModeSettings.ExternalDropZoneID = "externalDropZone";
                    ss.AdvancedModeSettings.DropZoneText = "";
                    ss.ValidationSettings.MaxFileSize = Convert.ToInt64(Humica.EF.Models.SY.SYSettings.getSetting(Humica.Models.SY.ClsConstant.MAX_FILE_SIZE_ATTACHMENT).SettinValue);
                    ss.BrowseButton.Image.IconID = IconID.ActionsNew16x16;
                    ss.ValidationSettings.AllowedFileExtensions = new string[] { ".jpg", ".jpeg", ".jpe", ".gif", ".bmp", ".png", ".doc", ".docx", ".pdf" };
                    ss.ValidationSettings.ErrorStyle.CssClass = "validationMessage";
                    ss.BrowseButton.Text = Humica.EF.Models.SY.SYSettings.getLabel("");
                    ss.ClientSideEvents.FileUploadComplete = "completedUploadFileItem";
                }).Render();

                Html.DevExpress().HyperLink(
                s =>
                {
                    s.Name = "file_uploaded";
                    s.ToolTip = "File";
                    s.ClientVisible = false;
                    s.Properties.Target = "_BLANK";
                    s.Properties.Text = Humica.EF.Models.SY.SYSettings.getLabel("View");

                }).GetHtml();

                // Get the current row's data
                var attachFile = Convert.ToString(DataBinder.Eval(c.DataItem, "ContractPath"));
                var TranNo = Convert.ToString(DataBinder.Eval(c.DataItem, "TranNo"));
                //var empCode = Convert.ToString(DataBinder.Eval(c.DataItem, "EmpCode"));
                //var relCode = Convert.ToString(DataBinder.Eval(c.DataItem, "RelCode"));
                //var rowKey = empCode + "_" + relCode;

                // Display existing file hyperlinks
                if (!string.IsNullOrEmpty(attachFile))
                {
                    var filePaths = attachFile.Split(';');
                    var filePathsList = filePaths
                        .Where(path => !string.IsNullOrEmpty(path))
                        .Select(path => path.Trim())
                        .ToList();

                    if (filePathsList.Any())
                    {
                        ViewContext.Writer.Write("<div style=\"white-space: pre-wrap; display: block;\">");
                        string containerId = "txtFileContractContainer_" + TranNo;
                        ViewContext.Writer.Write(string.Format("<div id=\"{0}\" style=\"white-space: pre-wrap; display: block;\">", containerId));
                        for (int i = 0; i < filePathsList.Count; i++)
                        {
                            var filePath = filePathsList[i];
                            var fileName = System.IO.Path.GetFileName(filePath);
                            Html.DevExpress().HyperLink(s =>
                            {
                                s.Name = "file_edit_" + TranNo + "_" + i;
                                s.ToolTip = "File";
                                s.ClientVisible = true;
                                s.Properties.Text = fileName;
                                s.Properties.ClientSideEvents.Click = "function(s, e) { ShowFilePopup('" + filePath + "', '" + fileName + "', '" + TranNo + "', 'IsContract'); }";
                            }).GetHtml();

                            if (i < filePathsList.Count - 1)
                            {
                                ViewContext.Writer.Write("<br />");
                            }
                        }
                        ViewContext.Writer.Write("</div>");
                        ViewContext.Writer.Write("<br />");
                    }
                }
            });
        });
        settings.Settings.VerticalScrollBarMode = ScrollBarMode.Hidden;
        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
        settings.Settings.ShowHeaderFilterButton = true;

        settings.SettingsPager.PageSize = 15;
        settings.SettingsPager.EnableAdaptivity = true;
        settings.SettingsPager.PageSizeItemSettings.Visible = true;

        settings.SettingsExport.EnableClientSideExportAPI = true;
        settings.SettingsExport.ExportSelectedRowsOnly = true;

        settings.SettingsPopup.EditForm.SettingsAdaptivity.MaxWidth = 800;
        settings.SettingsPopup.EditForm.SettingsAdaptivity.Mode = PopupControlAdaptivityMode.Always;
        settings.SettingsPopup.EditForm.SettingsAdaptivity.VerticalAlign = PopupAdaptiveVerticalAlign.WindowCenter;
        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.CellEditorInitialize = (s, e) =>
        {
            ASPxEdit editor = (ASPxEdit)e.Editor;
            editor.ValidationSettings.Display = Display.Dynamic;
        };
    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

@Html.DevExpress().PopupControl(popupSettings =>
{
    popupSettings.Name = "FilePopupEditContract";
    popupSettings.Width = 400;
    popupSettings.Height = 80;
    popupSettings.AllowDragging = true;
    popupSettings.CloseAction = CloseAction.CloseButton;
    popupSettings.HeaderText = "File Actions";
    popupSettings.Modal = true;
    popupSettings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
    popupSettings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;

    popupSettings.ClientSideEvents.Init = "function(s, e) { s.filePath = ''; s.fileName = ''; s.TranNo = ''; }";
    popupSettings.ClientSideEvents.CloseUp = "function(s, e) { s.filePath = ''; s.fileName = ''; s.TranNo = ''; }";

    popupSettings.SetContent(() =>
    {
        Html.DevExpress().Label(l =>
        {
            l.Name = "lblFileNameEditContract";
            l.Text = "";
            l.Properties.ClientSideEvents.Init = "function(s, e) { s.SetText(ASPxClientPopupControl.Cast('FilePopupEditContract').fileName); }";
        }).Render();

        ViewContext.Writer.Write("<br /><br />");

        ViewContext.Writer.Write(" ");

        Html.DevExpress().Button(b =>
        {
            b.Name = "btnDeleteEditContract";
            b.Text = "Delete";
            b.ClientSideEvents.Click = "function(s, e) { DeleteFileEdu(ASPxClientPopupControl.Cast('FilePopupEditContract').TranNo, ASPxClientPopupControl.Cast('FilePopupEditContract').filePath, 'IsContract'); FilePopupEditContract.Hide(); }";
        }).Render();
    });
}).GetHtml()