@model Humica.Logic.LM.GenerateLeaveObject
<script type="text/javascript">

    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_btnSaveActionGrid').click(function () {
            $("form").submit();
        });
    });
    function OnClientValueChanged(s, e)
    {
       ShowData();
    }
   
    function ShowDataEmp() {
        var total = 0;
        $.ajax({
            type: 'post',
            url: _baseUrl + '/HRM/Leave/HREditLeaveEnTitle/ShowDataEmp',
            data: { 'id': 'TOTAL', 'EmpCode': selectedIDs },
            success: function (data) {
                if (data.MS == "OK") {
                    txtAllName.SetValue(data.AllName);
                    txtPosition.SetValue(data.Position);
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }

    function EmpDbRowClick(s, e) {
        s.GetRowValues(s.GetFocusedRowIndex(), 'EmpCode;', OnGetRowValuesEmp);
        cboEmployee.HideDropDown();
    }

    function rowSelected(s, e) {
        EmployeeGridListSelector.GetRowValues(EmployeeGridListSelector.GetFocusedRowIndex(), 'EmpCode;', OnGetRowValuesEmp);
        cboEmployee.HideDropDown();
    }
    function OnGetRowValuesEmp(values) {
        cboEmployee.SetValue(values[0]);
        selectedIDs = values[0];
        ShowDataEmp();
    }
</script>
<style>
</style>

@{
    Html.DevExpress().FormLayout(settings =>
    {

        settings.Name = "HREditLeaveEntitle";
        settings.AlignItemCaptionsInAllGroups = true;
        settings.Items.AddGroupItem(m => Model.HeaderEditEntitle, g =>
        {
            g.ColCount = 2;
            g.GroupBoxDecoration = GroupBoxDecoration.None;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EmpCode");
            })
          .SetNestedContent(() =>
          {
              Html.DevExpress().DropDownEditFor(i => i.HeaderEditEntitle.EmpCode, s =>
              {
                  s.Properties.ClientInstanceName = "cboEmployee";
                  s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                  s.Properties.ValidationSettings.SetFocusOnError = true;
                  s.Properties.ValidationSettings.ErrorText = "*";
                  s.SetDropDownWindowTemplateContent(c =>
                  {
                      Html.RenderPartial(Humica.Models.SY.SYListFilter.ListFilterViewEmployee);

                      ViewContext.Writer.Write("<div style=\"padding: 6px; height: 24px;\">");

                      @Html.DevExpress().Button(
                        buttonSettings =>
                        {
                            buttonSettings.Name = "buttonSelect";
                            buttonSettings.Text = Humica.EF.Models.SY.SYSettings.getLabel("Ok");
                            buttonSettings.Style.Add("float", "right");
                            buttonSettings.Style.Add("margin", "0px 3px");
                            buttonSettings.ClientSideEvents.Click = "rowSelected";
                            buttonSettings.Height = 25;
                        }
                            ).Render();
                      ViewContext.Writer.Write("</div>");

                  });
                  s.Properties.AnimationType = AnimationType.None;
              }).Render();
          });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("AllName");
            })
                .SetNestedContent(() =>
                {
                    Html.DevExpress().TextBoxFor(i => i.HeaderEditEntitle.EmpName, s =>
                    {
                        s.Properties.ClientInstanceName = "txtAllName";
                        s.ReadOnly = true;
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                        s.Properties.ValidationSettings.SetFocusOnError = true;
                        s.Properties.ValidationSettings.ErrorText = "*";
                    }).Render();
                });

            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Position");
            })
              .SetNestedContent(() =>
              {
                  Html.DevExpress().TextBoxFor(i => i.HeaderEditEntitle.Position, s =>
                  {
                      s.Properties.ClientInstanceName = "txtPosition";
                      s.ReadOnly = true;
                      s.ShowModelErrors = true;
                      s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                      s.Properties.ValidationSettings.SetFocusOnError = true;
                      s.Properties.ValidationSettings.ErrorText = "*";
                  }).Render();
              });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "DocumentDate");
                m.ColSpan = 1;
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().DateEditFor(i => i.HeaderEditEntitle.DocumentDate, s =>
                {

                    s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Date = DateTime.Now;
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("LeaveType");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().ComboBoxFor(i => i.HeaderEditEntitle.LeaveType, s =>
                {
                    s.Properties.ClientInstanceName = "txtLeave";
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.TextFormatString = "{0}";
                    s.Properties.ValueField = "Code";
                    s.Properties.TextField = "Description";
                    s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                    s.Properties.ClientSideEvents.SelectedIndexChanged = "OnClientValueChanged";
                }).BindList(ViewData["LeaveTypes_SELECT"]).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("InYear");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().SpinEditFor(i => i.HeaderEditEntitle.InYear, s =>
                {
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.NumberType = SpinEditNumberType.Integer;
                    s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                    s.Properties.MinValue = 1;
                    s.Properties.MaxValue = 9999;
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Balance");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().SpinEditFor(i => i.HeaderEditEntitle.Balance, s =>
                {
                    s.Properties.ClientInstanceName = "txtBalance";
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.DisplayFormatString = "N";
                    s.Properties.NumberType = SpinEditNumberType.Float;
                    s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                    s.Properties.MinValue = 1;
                    s.Properties.MaxValue = 9999999999999;
                }).Render();
            });

        });
    }).GetHtml();
}
