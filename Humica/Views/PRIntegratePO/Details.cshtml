@model Humica.Logic.PR.PRGLmappingObject
<script type="text/javascript">
    var status = "@Model.HeaderPO.Status";
    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_bthEditAction').click(function () {
            if ("@Model.HeaderPO.Status" == "@Humica.EF.SYDocumentStatus.OPEN.ToString()") {
                window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + "Edit?id=@ViewData[Humica.EF.Models.SY.SYConstant.PARAM_ID].ToString()";
            }
            else {
                AlertMessage("@Humica.EF.Models.SY.SYMessages.getMessage("DOC_INV", Humica.EF.MD.SYSession.getSessionUser().Lang)");
            }
        });
        $('#_btnDeleteAction').click(function () {
            ss = 41;
            if ("@Model.HeaderPO.Status" == "@Humica.EF.SYDocumentStatus.OPEN.ToString()") {
                ConfirmMessage("@Humica.EF.Models.SY.SYMessages.getMessage("DELETE_C")");
            }
            else {
                AlertMessage("@Humica.EF.Models.SY.SYMessages.getMessage("DOC_INV", Humica.EF.MD.SYSession.getSessionUser().Lang)");
            }
        });
        $('#_btnPrintction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + "Print?id=@ViewData[Humica.EF.Models.SY.SYConstant.PARAM_ID].ToString()";
        });
    });
    function EndCallBack() {
        var total = 0;
        $.ajax({
            type: 'post',
            url: _baseUrl + '/PR/PRM/PRIntegration/Refreshvalue',
            data: { 'id': 'TOTAL', 'action': 'Create' },
            success: function (data) {
                if (data.MS == "OK") {
                    txtCredit.SetValue(data.CreditAmount);
                    txtDebit.SetValue(data.DebitAmount);
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
    function _clickMenuAction(s, e) {
        if (e.item.name == "_btnCUSCEN") {
            ss = 6;
            if (status == "@Humica.EF.SYDocumentStatus.OPEN.ToString()") {
                ConfirmMessage("@Humica.EF.Models.SY.SYMessages.getMessage("RELEASE_C", Humica.EF.MD.SYSession.getSessionUser().Lang)");
            }
            else {
                AlertMessage("@Humica.EF.Models.SY.SYMessages.getMessage("DOC_INV", Humica.EF.MD.SYSession.getSessionUser().Lang)");
            }
        }
    }
    function _clickConfirm(s, e) {
        if (s.GetText() == "@Humica.EF.Models.SY.SYConstant.OK") {
           if (ss == 41) {
                window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + "Delete?id=@ViewData[Humica.EF.Models.SY.SYConstant.PARAM_ID].ToString()";
            }
            //Release
            if (ss == 6) {
                window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + "CUSCEN?id=@ViewData[Humica.EF.Models.SY.SYConstant.PARAM_ID].ToString()";
            }
        }
    }

</script>
@{
    Html.DevExpress().FormLayout(settings =>
    {
        settings.Name = "PODetail";
        settings.AlignItemCaptionsInAllGroups = true;

        settings.Items.AddGroupItem(m => Model.HeaderPO, g =>
        {
            g.ColCount = 3;
            g.GroupBoxDecoration = GroupBoxDecoration.None;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("DocumentType") + "*";
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().ComboBoxFor(i => i.HeaderPO.DocumentType, s =>
                {
                    s.ReadOnly = true;
                    s.Width = Unit.Percentage(100);
                    s.Properties.ClientInstanceName = "cboDocType";
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                    s.Properties.ValueType = typeof(string);
                    s.Properties.ValueField = "JournalType";
                    s.Properties.TextField = "Description";
                    s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                         ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "_SELECT");
                }).BindList(ViewData["JOURNAL_SELECT"]).Render();
            });

            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                    ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "IntegrateNo") + "*";
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderPO.IntegrateNo, s =>
                {
                    s.Width = Unit.Percentage(100);
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.ReadOnly = true;
                    s.Properties.NullDisplayText = Humica.EF.Models.SY.SYConstant.NEW_RECORD;
                    s.Properties.NullText = Humica.EF.Models.SY.SYConstant.NEW_RECORD;
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Company") + "*";
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().ComboBoxFor(i => i.HeaderPO.CompanyCode, s =>
                {
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                    s.Properties.ValueType = typeof(string);
                    s.Properties.ValueField = "CompanyCode";
                    s.Properties.TextField = "CompENG";
                    s.Properties.Columns.Add("CompanyCode", Humica.EF.Models.SY.SYSettings.getLabel("Company"));
                    s.Properties.Columns.Add("CompENG", Humica.EF.Models.SY.SYSettings.getLabel("Description"));
                    s.Properties.TextFormatString = "{0}:{1}";
                    s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                         ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "_SELECT");
                    s.Properties.ClientInstanceName = "cboPro";
                }).BindList(ViewData["COMPANY_CODE"]).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("DocumentDate");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().DateEditFor(i => i.HeaderPO.DocumentDate, s =>
                {
                    s.ReadOnly = true;
                    s.Width = Unit.Percentage(100);
                    s.ShowModelErrors = true;
                    s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Branch") + "*";
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().ComboBoxFor(i => i.HeaderPO.Branch, s =>
                {
                    s.Width = Unit.Percentage(100);
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                    s.Properties.ValueType = typeof(string);
                    s.Properties.ValueField = "Code";
                    s.Properties.TextField = "Description";
                    s.Properties.Columns.Add("Code", Humica.EF.Models.SY.SYSettings.getLabel("Code"));
                    s.Properties.Columns.Add("Description", Humica.EF.Models.SY.SYSettings.getLabel("Description"));
                    s.Properties.TextFormatString = "{0}:{1}";
                    s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                         ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "_SELECT");
                }).BindList(ViewData["BRANCHES_SELECT"]).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Amount");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().SpinEditFor(i => i.HeaderPO.Amount, s =>
                {
                    s.Width = Unit.Percentage(100);
                    s.Properties.ClientInstanceName = "txtDebit";
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.MinValue = 0;
                    s.Properties.MaxValue = 9999999999;
                    s.Properties.DisplayFormatString = "N";
                    s.ControlStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Right;
                }).Render();
            });

            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Vendor") + "*";
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().ComboBoxFor(i => i.HeaderPO.VendorCode, s =>
                {
                    s.ReadOnly = true;
                    s.Width = Unit.Percentage(100);
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                    s.Properties.ValueType = typeof(string);
                    s.Properties.ValueField = "Code";
                    s.Properties.TextField = "Description";
                    s.Properties.Columns.Add("Code", Humica.EF.Models.SY.SYSettings.getLabel("Code"));
                    s.Properties.Columns.Add("Description", Humica.EF.Models.SY.SYSettings.getLabel("Description"));
                    s.Properties.TextFormatString = "{0}:{1}";
                    s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
                         ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "_SELECT");
                }).BindList(ViewData["Vendor_SELECT"]).Render();
            });

            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("CurrencyCode");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderPO.CurrencyCode, s =>
                {
                    s.ReadOnly = true;
                    s.Width = Unit.Percentage(100);
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Status");
            })
           .SetNestedContent(() =>
           {
               Html.DevExpress().TextBoxFor(i => i.HeaderPO.Status, s =>
               {
                   s.ReadOnly = true;
                   s.Width = Unit.Percentage(100);
                   s.ShowModelErrors = true;
                   s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                   s.Properties.ValidationSettings.SetFocusOnError = true;
                   s.Properties.ValidationSettings.ErrorText = "*";
               }).Render();
           });

            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Description");
                m.ColumnSpan = 3;
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderPO.Description, s =>
                {
                    s.ReadOnly = true;
                    s.Width = Unit.Percentage(100);
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
        });
    }).GetHtml();
}
@Html.DevExpress().PageControl(
   settings =>
   {
       settings.Name = "pcScrollingWorkCalendar";
       settings.Width = Unit.Percentage(100);

       settings.EnableTabScrolling = true;
       settings.TabAlign = TabAlign.Justify;

       settings.Styles.Tab.CssClass = "scrolling_Tab";

       settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
        ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "Item")).SetContent(() =>
        {
            Html.RenderPartial("_GLCharge", Model.ListPOItem);
        });

   }).GetHtml()