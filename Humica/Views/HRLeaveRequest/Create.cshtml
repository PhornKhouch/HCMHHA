@model Humica.Logic.LM.GenerateLeaveObject
<script type="text/javascript">
    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_btnSaveActionGrid').click(function () {
            $("form").submit();
        });
    });
    function convert(str) {
        var date = new Date(str),
          mnth = ("0" + (date.getMonth() + 1)).slice(-2),
          day = ("0" + date.getDate()).slice(-2),
          Minutes = ("0" + date.getMinutes()).slice(-2);
        return [date.getFullYear(), mnth, day].join("-");
    }
    function OnClientValueChanged(s, e)
    {
       ShowData();
    }
    function OnClientUnitChanged(s, e) {
        $.ajax({
            type: 'post',
            url: _baseUrl + '/HRM/Leave/HRLeaveRequest/ShowUNITS',
            data: { 'id': txtUnits.GetValue(), 'Action': 'Create' },
            success: function (data) {
                if (data.MS == "OK") {
                    GridItemDetails.Refresh();
                    if (txtLeave.GetValue() != null) {
                        ShowData();
                    }
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
    function ShowData() {
        var total = 0;
        $.ajax({
            type: 'post',
            url: _baseUrl + '/HRM/Leave/HRLeaveRequest/ShowData',
            data: {
                'id': txtLeave.GetValue(), 'FromDate': convert(txtFromDate.GetDate()), 'ToDate': convert(txtToDate.GetDate()),
                'EmpCode': cboEmployee.GetValue(), 'Units': txtUnits.GetValue(),'Action': 'Create'
            },
            success: function (data) {
                if (data.MS == "OK") {
                    txtNoDay.SetValue(data.NoDay);
                    txtNoPH.SetValue(data.NoPH);
                    txtNoRest.SetValue(data.NoRest);
                    txtBalance.SetValue(data.Balance);
                    GridItemDetails.Refresh();
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
    function EndCallBack(s, e)
    {
        $.ajax({
            type: 'post',
            url: _baseUrl + '/HRM/Leave/HRLeaveRequest/ReceiptTotal',
            data: { 'Action': 'Create' },
            success: function (data) {
                if (data.MS == "OK") {
                    txtNoDay.SetValue(data.NoDay);
                    txtNoPH.SetValue(data.NoPH);
                    txtNoRest.SetValue(data.NoRest);
                    txtBalance.SetValue(data.Balance);
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }

    function ShowDataEmp() {
        var total = 0;
        $.ajax({
            type: 'post',
            url: _baseUrl + '/HRM/Leave/HRLeaveRequest/ShowDataEmp',
            data: { 'id': 'TOTAL', 'EmpCode': selectedIDs },
            success: function (data) {
                if (data.MS == "OK") {
                    var StartDate = data.StartDate;
                    nowDate = new Date(parseInt(StartDate.substr(6)));
                    txtAllName.SetValue(data.AllName);
                    txtEmpType.SetValue(data.EmpType);
                    txtDivision.SetValue(data.Division);
                    txtDepartment.SetValue(data.DEPT);
                    txtSection.SetValue(data.SECT);
                    txtLevel.SetValue(data.LevelCode);
                    txtPosition.SetValue(data.Position);
                    txtStartDate.SetValue(nowDate);
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }

    function EmpDbRowClick(s, e) {
        s.GetRowValues(s.GetFocusedRowIndex(), 'EmpCode;', OnGetRowValuesEmp);
        cboEmployee.HideDropDown();
    }

    function rowSelected(s, e) {
        EmployeeGridListSelector.GetRowValues(EmployeeGridListSelector.GetFocusedRowIndex(), 'EmpCode;', OnGetRowValuesEmp);
        cboEmployee.HideDropDown();
    }
    function OnGetRowValuesEmp(values) {
        cboEmployee.SetValue(values[0]);
        selectedIDs = values[0];
        ShowDataEmp();
    }
</script>
<style>
</style>

@{
    Html.DevExpress().FormLayout(settings =>
    {

        settings.Name = "LeaveRequest";
        settings.AlignItemCaptionsInAllGroups = true;
        settings.Items.AddGroupItem(m => Model.HeaderEmpLeave, g =>
        {
            g.ColCount = 2;
            g.GroupBoxDecoration = GroupBoxDecoration.None;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EmpCode");
            })
          .SetNestedContent(() =>
          {
              Html.DevExpress().DropDownEditFor(i => i.HeaderStaff.EmpCode, s =>
              {
                  s.Properties.ClientInstanceName = "cboEmployee";
                  s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                  s.Properties.ValidationSettings.SetFocusOnError = true;
                  s.Properties.ValidationSettings.ErrorText = "*";
                  s.SetDropDownWindowTemplateContent(c =>
                  {
                      Html.RenderPartial(Humica.Models.SY.SYListFilter.ListFilterViewEmployee);

                      ViewContext.Writer.Write("<div style=\"padding: 6px; height: 24px;\">");

                      @Html.DevExpress().Button(
                            buttonSettings =>
                            {
                                buttonSettings.Name = "buttonSelect";
                                buttonSettings.Text = Humica.EF.Models.SY.SYSettings.getLabel("Ok");
                                buttonSettings.Style.Add("float", "right");
                                buttonSettings.Style.Add("margin", "0px 3px");
                                buttonSettings.ClientSideEvents.Click = "rowSelected";
                                buttonSettings.Height = 25;
                            }
                            ).Render();
                      ViewContext.Writer.Write("</div>");

                  });
                  s.Properties.AnimationType = AnimationType.None;
              }).Render();
          });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("AllName");
            })
                .SetNestedContent(() =>
                {
                    Html.DevExpress().TextBoxFor(i => i.HeaderStaff.AllName, s =>
                    {
                        s.Properties.ClientInstanceName = "txtAllName";
                        s.ReadOnly = true;
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                        s.Properties.ValidationSettings.SetFocusOnError = true;
                        s.Properties.ValidationSettings.ErrorText = "*";
                    }).Render();
                });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EmployeeType");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().TextBoxFor(i => i.HeaderStaff.EmployeeType, s =>
                 {
                     s.Properties.ClientInstanceName = "txtEmpType";
                     s.ReadOnly = true;
                     s.ShowModelErrors = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                 }).Render();
             });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Division");
            })
               .SetNestedContent(() =>
               {
                   Html.DevExpress().TextBoxFor(i => i.HeaderStaff.DivisionDesc, s =>
                   {
                       s.Properties.ClientInstanceName = "txtDivision";
                       s.ReadOnly = true;
                       s.ShowModelErrors = true;
                       s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                       s.Properties.ValidationSettings.SetFocusOnError = true;
                       s.Properties.ValidationSettings.ErrorText = "*";
                   }).Render();
               });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Department");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Department, s =>
                {
                    s.Properties.ClientInstanceName = "txtDepartment";
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Section");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Section, s =>
                {
                    s.Properties.ClientInstanceName = "txtSection";
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("LevelCode");
            })
               .SetNestedContent(() =>
               {
                   Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Level, s =>
                   {
                       s.Properties.ClientInstanceName = "txtLevel";
                       s.ReadOnly = true;
                       s.ShowModelErrors = true;
                       s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                       s.Properties.ValidationSettings.SetFocusOnError = true;
                       s.Properties.ValidationSettings.ErrorText = "*";
                   }).Render();
               });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Position");
            })
              .SetNestedContent(() =>
              {
                  Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Position, s =>
                  {
                      s.Properties.ClientInstanceName = "txtPosition";
                      s.ReadOnly = true;
                      s.ShowModelErrors = true;
                      s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                      s.Properties.ValidationSettings.SetFocusOnError = true;
                      s.Properties.ValidationSettings.ErrorText = "*";
                  }).Render();
              });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("StartDate");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().DateEditFor(i => i.HeaderStaff.StartDate, s =>
                 {
                     s.Properties.ClientInstanceName = "txtStartDate";
                     s.ReadOnly = true;
                     s.ShowModelErrors = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                     s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                     s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                     s.Properties.ValidationSettings.ErrorText = "*";
                 }).Render();
             });
        });
        settings.Items.AddGroupItem(m => Model.HeaderEmpLeave, g =>
        {
            g.ColCount = 2;
            g.GroupBoxDecoration = GroupBoxDecoration.None;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Units");
            })
           .SetNestedContent(() =>
           {
               Html.DevExpress().ComboBoxFor(i => i.HeaderEmpLeave.Units, s =>
               {
                   s.Properties.ClientInstanceName = "txtUnits";
                   s.ShowModelErrors = true;
                   s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                   s.Properties.ValidationSettings.SetFocusOnError = true;
                   s.Properties.ValidationSettings.ErrorText = "*";
                   s.Properties.TextFormatString = "{0}";
                   s.Properties.ValueField = "Description";
                   s.Properties.TextField = "Description";
                   s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                   s.Properties.ClientSideEvents.SelectedIndexChanged = "OnClientUnitChanged";
               }).BindList(ViewData["UNITS_SELECT"]).Render();
           });
            g.Items.AddEmptyItem();
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("LeaveType");
            })
           .SetNestedContent(() =>
           {
               Html.DevExpress().ComboBoxFor(i => i.HeaderEmpLeave.LeaveCode, s =>
               {
                   s.Properties.ClientInstanceName = "txtLeave";
                   s.ShowModelErrors = true;
                   s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                   s.Properties.ValidationSettings.SetFocusOnError = true;
                   s.Properties.ValidationSettings.ErrorText = "*";
                   s.Properties.TextFormatString = "{0}";
                   s.Properties.ValueField = "Code";
                   s.Properties.TextField = "Description";
                   s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                   s.Properties.ClientSideEvents.SelectedIndexChanged = "OnClientValueChanged";
               }).BindList(ViewData["LeaveTypes_SELECT"]).Render();
           });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Balance");
            })
               .SetNestedContent(() =>
               {
                   Html.DevExpress().TextBoxFor(i => i.EmpLeaveB.Balance, s =>
                   {
                       s.Properties.ClientInstanceName = "txtBalance";
                       s.ReadOnly = true;
                       s.ShowModelErrors = true;
                       s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                       s.Properties.ValidationSettings.SetFocusOnError = true;
                       s.Properties.ValidationSettings.ErrorText = "*";
                   }).Render();
               });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("FromDate");
            })
              .SetNestedContent(() =>
              {
                  Html.DevExpress().DateEditFor(i => i.HeaderEmpLeave.FromDate, s =>
                  {
                      s.Properties.ClientInstanceName = "txtFromDate";
                      s.ShowModelErrors = true;
                      s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                      s.Properties.ValidationSettings.SetFocusOnError = true;
                      s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                      s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                      s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                      s.Properties.ValidationSettings.ErrorText = "*";
                      s.Properties.ClientSideEvents.ValueChanged = "OnClientValueChanged";
                  }).Render();
              });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("ToDate");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().DateEditFor(i => i.HeaderEmpLeave.ToDate, s =>
                 {
                     s.Properties.ClientInstanceName = "txtToDate";
                     s.ShowModelErrors = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                     s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                     s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                     s.Properties.ValidationSettings.ErrorText = "*";
                     s.Properties.ClientSideEvents.ValueChanged = "OnClientValueChanged";
                 }).Render();
             });

            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("NoDay");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().TextBoxFor(i => i.HeaderEmpLeave.NoDay, s =>
                 {
                     s.Properties.ClientInstanceName = "txtNoDay";
                     s.ReadOnly = true;
                     s.ShowModelErrors = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                 }).Render();
             });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("NoPH");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().TextBoxFor(i => i.HeaderEmpLeave.NoPH, s =>
                 {

                     s.Properties.ClientInstanceName = "txtNoPH";
                     s.ReadOnly = true;
                     s.ShowModelErrors = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                 }).Render();
             });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("NoRest");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderEmpLeave.NoRest, s =>
                {
                    s.Properties.ClientInstanceName = "txtNoRest";
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Reason") + "*";
                m.ColSpan = 2;
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderEmpLeave.Reason, s =>
                {
                    s.Width = Unit.Percentage(100);
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Task Hand Over");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().ComboBoxFor(i => Model.HeaderEmpLeave.TaskHand_Over, s =>
                 {
                     //s.Properties.ClientInstanceName = "cboEmployee";
                     s.ShowModelErrors = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                     s.Properties.TextField = "AllName";
                     s.Properties.TextFormatString = "{0}:{1}";
                     s.Properties.ValueField = "EmpCode";
                     s.Properties.Columns.Add("EmpCode", Humica.EF.Models.SY.SYSettings.getLabel("EmpCode"));
                     s.Properties.Columns.Add("AllName", Humica.EF.Models.SY.SYSettings.getLabel("AllName"));
                     s.Properties.Columns.Add("OthAllName", Humica.EF.Models.SY.SYSettings.getLabel("OthAllName"));
                     //s.Properties.ClientSideEvents.SelectedIndexChanged = "SelectEmp";
                     s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                 }).BindList(ViewData["STAFF_SELECT"]).Render();
             });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Attachment");
            })
          .SetNestedContent(() =>
          {
              Html.DevExpress().UploadControl(ss =>
              {
                  ss.ShowProgressPanel = true;
                  ss.CallbackRouteValues = new { Controller = "HRLeaveRequest", Action = "UploadControlCallbackActionImage" };
                  ss.Name = "UploadControl";
                  ss.UploadMode = UploadControlUploadMode.Auto;
                  ss.AutoStartUpload = true;
                  ss.Width = 120;
                  ss.DialogTriggerID = "externalDropZone";
                  ss.AdvancedModeSettings.EnableDragAndDrop = false;
                  ss.AdvancedModeSettings.EnableMultiSelect = false;
                  ss.ShowTextBox = false;
                  ss.ShowUploadButton = false;
                  ss.ShowAddRemoveButtons = true;
                  ss.ShowProgressPanel = true;
                  ss.ShowClearFileSelectionButton = true;
                  ss.AdvancedModeSettings.EnableFileList = true;
                  ss.AdvancedModeSettings.FileListPosition = UploadControlFileListPosition.Top;
                  ss.AdvancedModeSettings.ExternalDropZoneID = "externalDropZone";
                  ss.AdvancedModeSettings.DropZoneText = "";
                  ss.ValidationSettings.MaxFileSize = 4194304;
                  ss.BrowseButton.Image.IconID = IconID.ActionsNew16x16;
                  ss.UploadButton.Text = String.Empty;
                  ss.ValidationSettings.AllowedFileExtensions = new string[] { ".jpg", ".jpeg", ".pdf", ".png", ".doc", ".docx", ".xls", ".xlsx", ".txt" };
                  ss.ValidationSettings.ErrorStyle.CssClass = "validationMessage";
                  ss.BrowseButton.Text = Humica.EF.Models.SY.SYSettings.getLabel("");
                  ss.ClientSideEvents.FileUploadComplete = "completedUploadFileItem";
              }).Render();

              Html.DevExpress().HyperLink(
                s =>
                {
                    s.Name = "file_uploaded";
                    s.ToolTip = "File";
                    s.ClientVisible = false;
                    s.Properties.Target = "_BLANK";
                    s.Properties.Text = Humica.EF.Models.SY.SYSettings.getLabel("View");

                }).GetHtml();
          });
        });
    }).GetHtml();
    @Html.Partial("GridItemDetails", Model)
}
