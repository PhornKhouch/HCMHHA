@model Humica.Logic.HR.HREmpEvaluateObject
<script type="text/javascript">
    var status = "@Model.Header.Status";
    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_bthEditAction').click(function () {
            if ("@Model.Header.Status" == "@Humica.EF.SYDocumentStatus.APPROVED.ToString()") {
                window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + "Edit?EvaluateID=@ViewData[Humica.EF.Models.SY.SYConstant.PARAM_ID].ToString()";
            }
            else {
                AlertMessage("@Humica.EF.Models.SY.SYMessages.getMessage("DOC_INV", Humica.EF.MD.SYSession.getSessionUser().Lang)");
            }
        });
    });
    function _clickMenuAction(s, e) {
        if (e.item.name == "_mnApprove") {
            ss = 6;
            if (status == "@Humica.EF.SYDocumentStatus.PROCESSING.ToString()") {
                ConfirmMessage("@Humica.EF.Models.SY.SYMessages.getMessage("APPROVE_C", Humica.EF.MD.SYSession.getSessionUser().Lang)");
            }
            else {
                AlertMessage("@Humica.EF.Models.SY.SYMessages.getMessage("DOC_INV", Humica.EF.MD.SYSession.getSessionUser().Lang)");
            }
        }
        if (e.item.name == "_mnCancel") {
            ss = 8;
            if (!(status == "@Humica.EF.SYDocumentStatus.CANCELLED.ToString()" || status == "@Humica.EF.SYDocumentStatus.APPROVED.ToString()")) {
                ConfirmMessage("@Humica.EF.Models.SY.SYMessages.getMessage("CANCEL_A", Humica.EF.MD.SYSession.getSessionUser().Lang)");
            }
            else {
                AlertMessage("@Humica.EF.Models.SY.SYMessages.getMessage("DOC_INV", Humica.EF.MD.SYSession.getSessionUser().Lang)");
            }
        }
    }
    function _clickConfirm(s, e) {
        if (s.GetText() == "@Humica.EF.Models.SY.SYConstant.OK") {
            if (ss == 4) {
                window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + "Delete?id=@ViewData[Humica.EF.Models.SY.SYConstant.PARAM_ID].ToString()";
            }
            if (ss == 6) {
                window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + "Approve?id=@ViewData[Humica.EF.Models.SY.SYConstant.PARAM_ID].ToString()";
            }
             if (ss == 8) {
                window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + "Cancel?id=" + "@ViewData[Humica.EF.Models.SY.SYConstant.PARAM_ID].ToString()";
            }
        }
    }
    function convertToJavaScriptDate(value) {
        var pattern = /Date\(([^)]+)\)/;
        var results = pattern.exec(value);
        var dt = new Date(parseFloat(results[1]));
        return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
    }

</script>

<style>
    .table-section thead > tr > th {
        background: #00a94f;
        color:white;
    }
    .text-indent {
        text-indent:25px;
    }
    .text-body {
        font-weight:normal;
    }
</style>

@Html.DevExpress().FormLayout(settings =>
{
    settings.Name = "Details";
    settings.AlignItemCaptionsInAllGroups = true;
    settings.Items.AddGroupItem(m => Model.Header, g =>
    {
        g.ColCount = 3;
        g.GroupBoxDecoration = GroupBoxDecoration.None;
        g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EmpCode");
        })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().ComboBoxFor(i => i.Header.EmpCode, s =>
                 {
                     s.ReadOnly = true;
                     s.Properties.ClientInstanceName = "txtEmpID";
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                     s.Properties.TextField = "AllName";
                     s.Properties.TextFormatString = "{0}";
                     s.Properties.ValueField = "EmpCode";
                     s.Properties.Columns.Add("EmpCode", Humica.EF.Models.SY.SYSettings.getLabel("EmpCode"));
                     s.Properties.Columns.Add("AllName", Humica.EF.Models.SY.SYSettings.getLabel("AllName"));
                     s.Properties.Columns.Add("OthAllName", Humica.EF.Models.SY.SYSettings.getLabel("OthAllName"));
                     s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                 }).BindList(ViewData["STAFF_SELECT"]).Render();
             });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Employee Name");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.EmpName, s =>
            {
                s.Properties.ClientInstanceName = "txtEmpName";
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Position");
        })
          .SetNestedContent(() =>
          {
              Html.DevExpress().TextBoxFor(i => i.Header.Position, s =>
              {
                  s.Width = Unit.Percentage(100);
                  s.Properties.ClientInstanceName = "txtPosition";
                  s.ReadOnly = true;
                  s.ShowModelErrors = true;
                  s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                  s.Properties.ValidationSettings.SetFocusOnError = true;
                  s.Properties.ValidationSettings.ErrorText = "*";
              }).Render();
          });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EvaluateType");
        })
       .SetNestedContent(() =>
       {
           Html.DevExpress().ComboBoxFor(i => i.Header.EvaluateType, s =>
           {
               s.ReadOnly = true;
               s.Properties.ClientInstanceName = "txtAppraiselType";
               s.ShowModelErrors = true;
               s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
               s.Properties.ValidationSettings.SetFocusOnError = true;
               s.Properties.ValidationSettings.ErrorText = "*";
               s.Properties.TextFormatString = "{0}";
               s.Properties.ValueField = "Code";
               s.Properties.TextField = "Description";
               s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
           }).BindList(ViewData["APPRTYPE_SELECT"]).Render();
       });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EvaluateDate");
            m.ColumnSpan = 1;
        })
          .SetNestedContent(() =>
          {
              Html.DevExpress().DateEditFor(i => i.Header.EvaluateDate, s =>
              {
                  s.ReadOnly = true;
                  s.ShowModelErrors = true;
                  s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                  s.Properties.ValidationSettings.SetFocusOnError = true;
                  s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                  s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                  s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                  s.Properties.ValidationSettings.ErrorText = "*";
              }).Render();
          });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("AssignedTo") + "*";
        })
       .SetNestedContent(() =>
       {
           Html.DevExpress().ComboBoxFor(i => i.Header.AssignedTo, s =>
           {
               s.ReadOnly = true;
               s.Width = Unit.Percentage(100);
               s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
               s.Properties.ValidationSettings.SetFocusOnError = true;
               s.Properties.ValidationSettings.ErrorText = "*";
               s.Properties.TextField = "AllName";
               s.Properties.TextFormatString = "{0}:{1}";
               s.Properties.ValueField = "EmpCode";
               s.Properties.Columns.Add("EmpCode", Humica.EF.Models.SY.SYSettings.getLabel("EmpCode"));
               s.Properties.Columns.Add("AllName", Humica.EF.Models.SY.SYSettings.getLabel("AllName"));
               s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
           }).BindList(ViewData["STAFF_SELECT"]).Render();
       });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("From Date");
            m.ColumnSpan = 1;
        })
          .SetNestedContent(() =>
          {
              Html.DevExpress().DateEditFor(i => i.Header.EvalFromDate, s =>
              {
                  s.ReadOnly = true;
                  s.ShowModelErrors = true;
                  s.Properties.ClientInstanceName = "dtDate";
                  s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                  s.Properties.ValidationSettings.SetFocusOnError = true;
                  s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                  s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                  s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                  s.Properties.ValidationSettings.ErrorText = "*";
              }).Render();
          });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("To Date");
            m.ColumnSpan = 1;
        })
            .SetNestedContent(() =>
            {
                Html.DevExpress().DateEditFor(i => i.Header.EvalToDate, s =>
                {
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ClientInstanceName = "dtDate";
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });

        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("AssignedPosition");
        })
         .SetNestedContent(() =>
         {
             Html.DevExpress().TextBoxFor(i => i.Header.AssignedPosition, s =>
             {
                 s.Width = Unit.Percentage(100);
                 s.Properties.ClientInstanceName = "txtAssignedPosition";
                 s.ReadOnly = true;
                 s.ShowModelErrors = true;
                 s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                 s.Properties.ValidationSettings.SetFocusOnError = true;
                 s.Properties.ValidationSettings.ErrorText = "*";
             }).Render();
         });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Score");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.TotalScore, s =>
            {
                s.Properties.ClientInstanceName = "txtScore";
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Result");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.Result, s =>
            {
                s.ReadOnly = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Status");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.Status, s =>
            {
                s.ReadOnly = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
    });
}).GetHtml()

<div class="container-fluid">
    @foreach (var l in Model.ListRegion.OrderBy(w => w.InOrder).ToList())
    {
        <table class="table table-section table-striped" style="font-family: 'Khmer OS Battambang'">
            <thead>
                <tr>
                    <th>@l.Description</th>
                    @if (l.IsRating == true)
                    {
                        <th>Rating</th>
                    }
                    @if (l.IsComment == true)
                    {
                        <th>Comment</th>
                    }
                </tr>
            </thead>
                @{
                    int line = 1;
                }
            <tbody>
            @foreach (var q in Model.ListFactor.Where(w => w.Region == l.Code).OrderBy(w => w.Code).ToList())
            {
                string name = "rate" + line;
                    <tr>
                        <th style="width: 40%;">
                            <span class="text-body">@q.Code/ @q.SecDescription @q.Description</span>
                            <p class="text-indent text-body">
                                @q.Remark
                            </p>
                        </th>

                        @{string _Comment = "";}
                        @{
                            var _Listcheck = Model.ListScore.FirstOrDefault(w => w.Code == q.Code && w.Region == q.Region);
                            if (_Listcheck != null)
                            {
                                _Comment = _Listcheck.Remark;
                            }
                        }
                        @if (l.IsRating == true)
                        {
                            <td style="width:25%">
                                @foreach (var r in Model.ListEmpRating.Where(w => w.Region == l.Code).OrderBy(w => w.RatingID).ToList())
                                {
                                    string value = q.Code + "_" + r.RatingID.ToString() + "_" + r.Rating.ToString();
                                    string strCheck = "";

                                    var _check = Model.ListScore.Where(w => w.Code == q.Code && w.RatingID == r.RatingID).ToList();
                                    if (_check.Count() > 0)
                                    {
                                        strCheck = "checked";
                                        _Comment = _check.First().Remark;
                                    }
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="@name" @strCheck onclick="return false" id="chek" value="@value">
                                        <label class="form-check-label" for="@value">
                                            @r.Description
                                        </label>
                                    </div>
                                }
                            </td>
                        }

                        @if (l.IsComment == true)
                        {

                            <td>
                                <textarea class="form-control" id="contactChoice5" readonly>@_Comment</textarea>
                            </td>

                        }
                    </tr>

                    line++;
                }

            </tbody>
    

    </table>
                    }
    </div>
