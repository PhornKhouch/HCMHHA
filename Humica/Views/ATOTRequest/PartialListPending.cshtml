@{
    var grid = Html.DevExpress().GridView(
    settings =>
    {

        settings.Name = "GridViewListPending";
        settings.KeyFieldName = "OTRNo";
        settings.EnableTheming = true;
        settings.EnableRowsCache = true;
        settings.Width = Unit.Percentage(100);
        settings.SettingsEditing.Mode = GridViewEditingMode.Inline;
        settings.SettingsEditing.NewItemRowPosition = GridViewNewItemRowPosition.Bottom;

        settings.SettingsBehavior.AllowSort = true;
        settings.SettingsSearchPanel.Visible = true;
        settings.CallbackRouteValues = new { Controller = "ATOTRequest", Action = "PartialListPending" };

        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.AllPages;
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowDeleteButton = false;

        settings.CommandColumn.ShowNewButtonInHeader = false;
        settings.CommandColumn.ShowCancelButton = false;
        settings.CommandColumn.ShowEditButton = false;
        settings.CommandColumn.ShowUpdateButton = false;
        settings.SettingsBehavior.AllowFocusedRow = true;

        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.SettingsBehavior.AllowSort = true;
        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsPopup.HeaderFilter.Height = 200;
        settings.SettingsBehavior.AllowEllipsisInText = true;
        settings.Settings.ShowHeaderFilterButton = true;

        settings.SettingsPopup.HeaderFilter.Height = 200;
        settings.Settings.ShowFooter = true;
        settings.SettingsContextMenu.Enabled = true;
        settings.SettingsSearchPanel.Visible = true;
        settings.SettingsBehavior.EnableCustomizationWindow = true;
        settings.SettingsBehavior.AllowEllipsisInText = true;
        settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.Control;

        settings.CommandColumn.FixedStyle = GridViewColumnFixedStyle.Left;

        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EmpCode");
            column.Width = 130;
            column.FieldName = "EmpCode";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
        });

        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("AllName");
            column.Width = 190;
            column.FieldName = "EmpName";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
        });
        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("OTStartTime");
            column.FieldName = "OTStartTime";
            column.Width = 150;
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            var textProperties = column.PropertiesEdit as DateEditProperties;
            textProperties.EditFormatString = "dd.MM.yyyy hh:mm tt";
            textProperties.DisplayFormatString = "dd.MM.yyyy hh:mm tt";
        });
        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("OTEndTime");
            column.FieldName = "OTEndTime";
            column.Width = 150;
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            var textProperties = column.PropertiesEdit as DateEditProperties;
            textProperties.EditFormatString = "dd.MM.yyyy hh:mm tt";
            textProperties.DisplayFormatString = "dd.MM.yyyy hh:mm tt";
        });
        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Total Hours");
            column.FieldName = "OTHour"; column.Width = 90;
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            //column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Total Hours");
        });
        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("BreakTime (min)");
            column.Width = 90;
            column.FieldName = "BreakTime";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
        });
        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Reason");
            column.Width = 200;
            column.FieldName = "Reason";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
        });

        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Status");
            column.Width = 90;
            column.FieldName = "Status";
        });

        settings.CellEditorInitialize = (s, e) =>
        {
            ASPxEdit editor = (ASPxEdit)e.Editor;
            editor.ValidationSettings.Display = Display.None;
        };


        settings.ClientSideEvents.RowDblClick = "DbRowClick";
        settings.ClientSideEvents.SelectionChanged = "OnSelectionChangedCourse";
        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Visible;
        settings.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
        settings.Settings.VerticalScrollableHeight = 450;
        settings.SettingsPager.PageSize = 450;
        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsPopup.HeaderFilter.Height = 200;
        settings.SettingsBehavior.AllowEllipsisInText = true;
        settings.SettingsBehavior.EnableCustomizationWindow = true;
        settings.SettingsDataSecurity.AllowReadUnlistedFieldsFromClientApi = DefaultBoolean.True;

        settings.FormatConditions.AddHighlight("Status", "[Status] = 'OPEN'", GridConditionHighlightFormat.BoldText);
        settings.FormatConditions.AddHighlight("Status", "[Status] = 'COMPLETED'", GridConditionHighlightFormat.GreenFillWithDarkGreenText);
        settings.FormatConditions.AddHighlight("Status", "[Status] = 'APPROVED'", GridConditionHighlightFormat.GreenFillWithDarkGreenText);
        settings.FormatConditions.AddHighlight("Status", "[Status] = 'RELEASED'", GridConditionHighlightFormat.GreenFillWithDarkGreenText);
        settings.FormatConditions.AddHighlight("Status", "[Status] = 'PENDING'", GridConditionHighlightFormat.YellowFillWithDarkYellowText);

        settings.CellEditorInitialize = (s, e) =>
        {
            ASPxEdit editor = (ASPxEdit)e.Editor;
            editor.ValidationSettings.Display = Display.Dynamic;
            if (e.KeyValue != null)
            {
                if (e.Column.FieldName != "LeadTime")
                {
                    e.Editor.ReadOnly = true;
                }
            }
        };
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
        settings.EditFormLayoutProperties.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
        settings.EditFormLayoutProperties.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 600;

        settings.SettingsBehavior.EnableCustomizationWindow = true;

        settings.CustomJSProperties = (s, e) =>
        {
            ASPxGridView grid1 = (ASPxGridView)s;
            var result = new System.Collections.Hashtable();
            foreach (var col in grid1.AllColumns)
            {
                var dataCol = col as GridViewDataColumn;
                if (dataCol != null)
                {
                    var visible = "T";
                    if (dataCol.Visible == false)
                    {
                        visible = "F";
                    }
                    result[dataCol.FieldName] = new Dictionary<string, object>() {
                                {"fieldName",dataCol.FieldName},
                                {"caption",dataCol.Caption},
                                { "sortIndex", dataCol.SortIndex },
                                { "sortOrder", dataCol.SortOrder },
                                { "groupIndex", dataCol.GroupIndex },
                                { "width", dataCol.Width },
                                { "visibleIndex", dataCol.VisibleIndex },
                                { "visible", visible },
                                { "fitler", dataCol.FilterExpression},
                           };
                }
            }

            e.Properties["cpColumnsProp"] = result;
        };

        settings.PreRender = (s, e) =>
        {

        };
        settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.Control;

    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()