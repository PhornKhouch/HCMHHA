
@model Humica.Logic.RCM.RCMPInterviewObject

<script type="text/javascript">
    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_btnSaveActionGrid').click(function () {
            $("form").submit();
        });
        if (Model.RCMPInterview.Status != null) {
            ViewContext.Writer.Write("$('#_btnSaveActionGrid').hide()");
        }
    });

    function convertToJavaScriptDate(value) {
        var pattern = /Date\(([^)]+)\)/;
        var results = pattern.exec(value);
        var dt = new Date(parseFloat(results[1]));
        return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
    }
    function CheckValue(value, Region) {
        $.ajax({
            type: 'post',
            url: _baseUrl + '/HRM/RCM/RCMInterviewProcess/CheckValue',
            data: {
                'Value': value, 'Region': Region, 'Action': 'Interview' },
            success: function (data) {
                if (data.MS == "OK") {
                    txtResult.SetValue(data.Total);
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
    function CommentValue(value, code, Region) {
        $.ajax({
            type: 'post',
            url: _baseUrl + '/HRM/RCM/RCMInterviewProcess/CommentValue',
            data: { 'Code': code, 'Value': value, 'Region': Region, 'Action': 'Interview' },
            success: function (data) {
                if (data.MS == "OK") {

                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
</script>

<style>
    .table-section thead > tr > th {
        background: #00a94f;
        color: white;
    }

    .text-indent {
        text-indent: 25px;
    }

    .text-body {
        font-weight: normal;
    }
</style>

@Html.DevExpress().FormLayout(settings =>
{
    settings.Name = "Create";
    settings.AlignItemCaptionsInAllGroups = true;

    settings.Items.AddGroupItem(m => Model.Header, g =>
    {
        g.ColCount = 3;
        g.GroupBoxDecoration = GroupBoxDecoration.None;
        g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;

        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("English Name");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.CandidateName, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtAppName";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Khmer Name");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Filter.OthAllName, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtOthAllName";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Gender");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Filter.Gender, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtGender";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Nationality");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Filter.Nationality, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtGender";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Apply Position");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().ComboBoxFor(i => i.Header.ApplyPost, s =>
            {
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ClientInstanceName = "txtApplyPos";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.ValueField = "Code";
                s.Properties.TextField = "Description";
            }).BindList(ViewData["POSITION_SELECT"]).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Apply Date");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().DateEditFor(i => i.Header.ApplyDate, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "dtApply";
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("ExpectSalary");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Filter.ExpectSalary, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtAppName";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Interview Step");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.IntVStep, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtIntVstep";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Status");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().ComboBoxFor(i => i.Header.Status, s =>
            {
                s.ShowModelErrors = true;
                s.Properties.AllowNull = true;
                s.Properties.ClientInstanceName = "cbStatus";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.ValueField = "SelectValue";
                s.Properties.TextField = "SelectText";
                s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
            }).BindList(ViewData["STATUS_SELECT"]).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Interview Date");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().DateEditFor(i => i.Header.IntVDate, s =>
            {
                s.Properties.ClientInstanceName = "dtIntV";
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Position Offer");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().ComboBoxFor(i => i.Header.PositionOffer, s =>
            {
                s.ShowModelErrors = true;
                s.Properties.AllowNull = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.ValueField = "Code";
                s.Properties.TextField = "Description";
            }).BindList(ViewData["POSITION_SELECT"]).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Proposed Salary");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().SpinEditFor(i => i.Header.ProposedSalary, s =>
            {
                s.Properties.ClientInstanceName = "spProposedSal";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.DisplayFormatString = "N2";
                s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Salary After Probation");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().SpinEditFor(i => i.Header.SalaryAfterProb, s =>
            {
                s.Properties.ClientInstanceName = "spAfProb";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.DisplayFormatString = "N2";
                s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
            }).Render();
        });
        //g.Items.AddEmptyItem();
        //g.Items.Add(m =>
        //{
        //    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Strength");
        //    m.ColumnSpan = 3;
        //}).SetNestedContent(() =>
        //{
        //    Html.DevExpress().MemoFor(i => i.Header.Strength, s =>
        //    {
        //        s.Height = 100;
        //        s.Width = Unit.Percentage(100);
        //        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
        //        s.Properties.ValidationSettings.SetFocusOnError = true;
        //        s.Properties.ValidationSettings.ErrorText = "*";
        //    }).Render();
        //});
        //g.Items.Add(m =>
        //{
        //    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Weakness");
        //    m.ColumnSpan = 3;
        //}).SetNestedContent(() =>
        //{
        //    Html.DevExpress().MemoFor(i => i.Header.Weakness, s =>
        //    {
        //        s.Height = 100;
        //        s.Width = Unit.Percentage(100);
        //        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
        //        s.Properties.ValidationSettings.SetFocusOnError = true;
        //        s.Properties.ValidationSettings.ErrorText = "*";
        //    }).Render();
        //});
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Description");
            m.ColumnSpan = 3;
        }).SetNestedContent(() =>
        {
            Html.DevExpress().MemoFor(i => i.Header.IntCmt, s =>
            {
                s.Height = 70;
                s.Width = Unit.Percentage(100);
                s.Properties.ClientInstanceName = "txtIntVCmt";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Attach File");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().UploadControl(ss =>
            {
                ss.ShowProgressPanel = true;
                ss.CallbackRouteValues = new { Controller = "RCMInterviewProcess", Action = "UploadControlCallbackActionImage" };
                ss.Name = "UploadControl";
                ss.UploadMode = UploadControlUploadMode.Auto;
                ss.AutoStartUpload = true;
                ss.Width = 120;
                ss.DialogTriggerID = "externalDropZone";
                ss.AdvancedModeSettings.EnableDragAndDrop = false;
                ss.AdvancedModeSettings.EnableMultiSelect = false;
                ss.ShowTextBox = false;
                ss.ShowUploadButton = false;
                ss.ShowAddRemoveButtons = true;
                ss.ShowProgressPanel = true;
                ss.ShowClearFileSelectionButton = true;
                ss.AdvancedModeSettings.EnableFileList = true;
                ss.AdvancedModeSettings.FileListPosition = UploadControlFileListPosition.Top;
                ss.AdvancedModeSettings.ExternalDropZoneID = "externalDropZone";
                ss.AdvancedModeSettings.DropZoneText = "";
                ss.ValidationSettings.MaxFileSize = 4194304;
                ss.BrowseButton.Image.IconID = IconID.ActionsNew16x16;
                ss.UploadButton.Text = String.Empty;
                ss.ValidationSettings.AllowedFileExtensions = new string[] { ".jpg", ".jpeg", ".pdf", ".png", ".doc", ".docx", ".xlsx" };
                ss.ValidationSettings.ErrorStyle.CssClass = "validationMessage";
                ss.BrowseButton.Text = Humica.EF.Models.SY.SYSettings.getLabel("");
                ss.ClientSideEvents.FileUploadComplete = "completedUploadFileItem";
            }).Render();

            Html.DevExpress().HyperLink(s =>
            {
                s.Name = "file_uploaded";
                s.ToolTip = "File";
                s.ClientVisible = false;
                s.Properties.Target = "_BLANK";
                s.Properties.Text = Humica.EF.Models.SY.SYSettings.getLabel("View");
            }).GetHtml();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Result");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.Result, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtResult";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
    });

}).GetHtml()
<div class="container-fluid">
    @{
        int line = 1;
    }
    @foreach (var l in Model.ListRegion.OrderBy(w => w.InOrder).ToList())
    {
        <table class="table table-section table-striped" style="font-family: 'Khmer OS Battambang'">
            <thead>
                <tr>
                    <th>@l.Description</th>
                    @if (l.IsRating == true)
                    {
                        <th>Rating</th>
                    }
                    @if (l.IsComment == true)
                    {
                        <th>Comment</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var q in Model.ListFactor.Where(w => w.Region == l.Code).OrderBy(w => w.Code).ToList())
                {
                    string name = "rate" + line;

                    <tr>
                        <th style="width: 40%;">
                            <span class="text-body">@q.Code/ @q.SecDescription @q.Description</span>
                            <p class="text-indent text-body">
                                @q.Remark
                            </p>
                        </th>
                        @if (l.IsRating == true)
                        {
                            <td style="width:25%">
                                @foreach (var r in Model.ListInterviewRating.Where(w => w.Code == l.Code).OrderBy(w => w.ID).ToList())
                                {
                                    string value = q.Code + "_" + r.ID.ToString() + "_" + r.Rating.ToString();
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="@name" onclick="CheckValue($(this).val(),'@l.Code')" id="@value" value="@value">
                                        <label class="form-check-label" for="@value" onclick="CheckValue($(@value).val(),'@l.Code')">
                                            @r.Description
                                        </label>
                                    </div>
                                }
                            </td>
                        }

                        @if (l.IsComment == true)
                        {

                            <td>
                                <textarea placeholder="Comment" class="form-control" onkeyup="CommentValue($(this).val(),'@q.Code','@l.Code')" id="contactChoice5"></textarea>
                            </td>

                        }
                    </tr>

                    line++;
                }

            </tbody>


        </table>
    }
</div>







