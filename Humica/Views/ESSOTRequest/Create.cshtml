@model Humica.Logic.PR.PROverTimeObject
<script type="text/javascript">

    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_btnSaveActionGrid').click(function () {
            $("form").submit();
        });
    });
    function convert(str) {
        var date = new Date(str),
          mnth = ("0" + (date.getMonth() + 1)).slice(-2),
          day = ("0" + date.getDate()).slice(-2),
          Minutes = ("0" + date.getMinutes()).slice(-2);
        return [date.getFullYear(), mnth, day].join("-") + " " + date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();
    }
    function SelectChangeCbo(s, e) {

        if (s.GetSelectedItem() != null) {
            txtAllName.SetValue(s.GetSelectedItem().GetColumnText(1));
            txtPosition.SetValue(s.GetSelectedItem().GetColumnText(2));
        }

    }
    function OnClientValueChanged(s,e)
    {
       ShowData();
    }
    function ShowData() {
        var total = 0;
        $.ajax({
            type: 'post',
            url: _baseUrl + '/SelfService/LeaveBalance/HROTRequest/ShowData',
            data: { 'FromDate': convert(txtFromDate.GetDate()), 'ToDate': convert(txtToDate.GetDate()), 'BreakTime': txtBreakTime.GetValue() },
            success: function (data) {
                if (data.MS == "OK") {
                    txtHour.SetValue(data.Hour);
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
    function SelectEmp(s, e) {
        txtEmpName.SetValue(s.GetSelectedItem().GetColumnText(1));
       // txtDepartment.SetValue(s.GetSelectedItem().GetColumnText(3));
        //txtPosition.SetValue(s.GetSelectedItem().GetColumnText(4));
        //txtEmpName();
    }

    function ShowDataEmp() {
        var total = 0;
        $.ajax({
            type: 'post',
            url: _baseUrl + '/HRM/Leave/ShowData/ShowDataEmp',
            data: { 'id': 'TOTAL', 'EmpCode': selectedIDs },
            success: function (data) {
                if (data.MS == "OK") {
                    var StartDate = data.StartDate;
                    nowDate = new Date(parseInt(StartDate.substr(6)));
                    txtAllName.SetValue(data.AllName);
                    txtEmpType.SetValue(data.EmpType);
                    txtDivision.SetValue(data.Division);
                    txtDepartment.SetValue(data.DEPT);
                    txtSection.SetValue(data.SECT);
                    txtLevel.SetValue(data.LevelCode);
                    txtPosition.SetValue(data.Position);
                    txtStartDate.SetValue(nowDate);
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
</script>
<style>
</style>

@{

    Html.DevExpress().FormLayout(settings =>
    {

        settings.Name = "LeaveRequest";
        settings.AlignItemCaptionsInAllGroups = true;

        settings.Items.AddGroupItem(m => Model.HeaderOT, g =>
        {

            g.ColCount = 2;
            g.GroupBoxDecoration = GroupBoxDecoration.None;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("OT Req. Number");
            })
              .SetNestedContent(() =>
              {
                  Html.DevExpress().TextBoxFor(i => i.HeaderOT.OTRNo, s =>
                  {
                      s.ReadOnly = true;
                      s.Width = Unit.Percentage(100);
                      s.ShowModelErrors = true;
                      s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                      s.Properties.ValidationSettings.SetFocusOnError = true;
                      s.Properties.ValidationSettings.ErrorText = "*";
                  }).Render();
              });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Status");
            })
           .SetNestedContent(() =>
           {
               Html.DevExpress().TextBoxFor(i => i.HeaderOT.Status, s =>
               {
                   s.Width = Unit.Percentage(100);
                   s.ShowModelErrors = true;
                   s.ReadOnly = true;
                   s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                   s.Properties.ValidationSettings.SetFocusOnError = true;
                   s.Properties.ValidationSettings.ErrorText = "*";
               }).Render();

           });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("StartTime");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().DateEditFor(i => i.HeaderOT.OTStartTime, s =>
                 {
                     s.Properties.ClientInstanceName = "txtFromDate";
                     s.ShowModelErrors = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.NullText = "dd.MM.yyyy hh:mm tt";
                     s.Properties.EditFormatString = "dd.MM.yyyy hh:mm tt";
                     s.Properties.DisplayFormatString = "dd.MM.yyyy hh:mm tt";
                     s.Properties.TimeSectionProperties.Visible = true;
                     //s.Properties.TimeSectionProperties.Adaptive = true;
                     s.Properties.TimeSectionProperties.TimeEditProperties.EditFormat = EditFormat.Custom;
                     s.Properties.TimeSectionProperties.TimeEditProperties.EditFormatString = "hh:mm tt";
                     s.Properties.ValidationSettings.ErrorText = "*";
                     s.Properties.ClientSideEvents.ValueChanged = "OnClientValueChanged";
                 }).Render();
             });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EndTime");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().DateEditFor(i => i.HeaderOT.OTEndTime, s =>
                {
                    s.Properties.ClientInstanceName = "txtToDate";
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.NullText = "dd.MM.yyyy hh:mm tt";
                    s.Properties.EditFormatString = "dd.MM.yyyy hh:mm tt";
                    s.Properties.DisplayFormatString = "dd.MM.yyyy hh:mm tt";
                    s.Properties.TimeSectionProperties.Visible = true;
                    //s.Properties.TimeSectionProperties.Adaptive = true;
                    s.Properties.TimeSectionProperties.TimeEditProperties.EditFormat = EditFormat.Custom;
                    s.Properties.TimeSectionProperties.TimeEditProperties.EditFormatString = "hh:mm tt";
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.ClientSideEvents.ValueChanged = "OnClientValueChanged";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Total Hours");
            })
              .SetNestedContent(() =>
              {
                  Html.DevExpress().TextBoxFor(i => i.HeaderOT.Hours, s =>
                  {
                      s.Properties.ClientInstanceName = "txtHour";
                      s.ReadOnly = true;
                      s.ShowModelErrors = true;
                      s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                      s.Properties.ValidationSettings.SetFocusOnError = true;
                      s.Properties.ValidationSettings.ErrorText = "*";
                      s.Properties.DisplayFormatString = "N2";
                  }).Render();
              });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("BreakTime(Min)");
            })
              .SetNestedContent(() =>
              {
                  Html.DevExpress().SpinEditFor(i => i.HeaderOT.BreakTime, s =>
                  {
                      s.Properties.ClientInstanceName = "txtBreakTime";
                      s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                      s.Properties.ValidationSettings.SetFocusOnError = true;
                      s.Properties.ValidationSettings.ErrorText = "*";
                      s.Properties.DisplayFormatString = "N2";
                      s.Properties.AllowNull = false;
                      s.Properties.MaxValue = 5;
                      s.Properties.MinValue = 0;
                      s.Properties.ClientSideEvents.ValueChanged = "OnClientValueChanged";
                      s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                  }).Render();
              });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Reason");
                m.ColSpan = 2;
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderOT.Reason, s =>
                {
                    s.Width = Unit.Percentage(100);
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
        });
    }).GetHtml();

}